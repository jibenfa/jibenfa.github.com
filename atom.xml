<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Welcome to Coffeecat‘s Blog</title>
 <link href="https://jibenfa.github.io/atom.xml" rel="self"/>
 <link href="https://jibenfa.github.io"/>
 <updated>2025-08-04T08:47:37+00:00</updated>
 <id>https://jibenfa.github.io</id>
 <author>
   <name>Coffeecat</name>
   <email></email>
 </author>

 
 <entry>
   <title>openwrt下v2ray透明代理配置从iptables向nftables迁移</title>
   <link href="https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2025/07/30/openwrtE4B88Bv2rayE9808FE6988EE4BBA3E79086vE9858DE7BDAEE4BB8EiptablesE59091nftablesE8BF81E7A7BB/"/>
   <updated>2025-07-30T03:22:13+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2025/07/30/openwrtE4B88Bv2rayE9808FE6988EE4BBA3E79086vE9858DE7BDAEE4BB8EiptablesE59091nftablesE8BF81E7A7BB</id>
   <content type="html">&lt;p&gt;由于openwrt的防火墙逐步从iptables向nftables升级，官方24.10.2的dnsmasq包默认不将ipset纳入编译选项，只支持nftset，
由此带来v2ray透明代理的配置必须进行升级，此次主要是调整了v2ray的配置和dnsmasq-full的配置。&lt;/p&gt;

&lt;p&gt;1）修改/etc/init.d/v2ray&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
  
#!/bin/sh /etc/rc.common
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#
# To use this file, install chinadns,v2ray,dnsmasq-full,coreutils-nohup,coreutils-paste first
#
#!/bin/sh /etc/rc.common

START=90
USE_PROCD=1

DOMAIN=&quot;xxx.com&quot; #需改为实际网址。同时在dnsmasq配置文件中设置nftset=/xxx.com/114.114.114.114
DNS_SERVER=&quot;114.114.114.114&quot;
BACKUP_DNS_SERVER=&quot;119.29.29.29 223.5.5.5 180.76.76.76&quot;
LOCAL_IP=&quot;127.0.0.1&quot;
#CHINADNS和V2RAY端口范围:5354-5355 5356-5357 5358-5359 5360-5361，须搭配对应的chinadns和v2ray配置文件使用
CHINADNS_MIN_PORT=&quot;5354&quot;
CHNROUTE_FILE=&quot;/etc/chinadns_chnroute.txt&quot;
V2RAY_PORT=&quot;1060&quot;
V2RAY_MAX_DNS_PORT=&quot;5361&quot;
V2RAY_DNS_PORTS=&quot;5357 5359 5361&quot;
V2RAY_BIN=&quot;/usr/bin/v2ray&quot;
V2RAY_CONF=&quot;/etc/config/v2ray.json&quot;

set_multi_domestic_dns() {
    current_dns_list=`uci get dhcp.@dnsmasq[0].server 2&amp;gt;/dev/null`
    if [ x${DNS_SERVER:0:15} != x${current_dns_list:0:15} ]; then
        echo &quot;[+] 设置使用国内DNS服务器&quot;
        uci -q delete dhcp.@dnsmasq[0].server
        uci add_list dhcp.@dnsmasq[0].server=${DNS_SERVER}
        for dns in $BACKUP_DNS_SERVER; do
            uci add_list dhcp.@dnsmasq[0].server=&quot;${dns}&quot;
        done
        uci set dhcp.@dnsmasq[0].noresolv=0
        uci set dhcp.@dnsmasq[0].nohosts=0
        uci commit dhcp
        echo &quot;[+] 重启dnsmasq服务&quot;
        /etc/init.d/dnsmasq restart 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        echo &quot;[✓] 完成&quot;
    fi
}

set_multi_foreign_dns() {
    current_dns_list=`uci get dhcp.@dnsmasq[0].server 2&amp;gt;/dev/null`
    if [ x${LOCAL_IP:0:9} != x${current_dns_list:0:9} ]; then
        echo &quot;[+] 设置使用ChinaDNS DNS服务器&quot;
        chinadns_port=`uci get chinadns.@chinadns[0].port 2&amp;gt;/dev/null`
        chinadns_listen_ipport=${LOCAL_IP}&quot;#&quot;${chinadns_port}
        uci -q delete dhcp.@dnsmasq[0].server
        uci add_list dhcp.@dnsmasq[0].server=${chinadns_listen_ipport}
        for port in $V2RAY_DNS_PORTS; do
            uci add_list dhcp.@dnsmasq[0].server=&quot;${LOCAL_IP}#${port}&quot;
        done
        uci set dhcp.@dnsmasq[0].noresolv=1
        uci set dhcp.@dnsmasq[0].nohosts=1
        uci commit dhcp
        echo &quot;[+] 重启dnsmasq服务&quot;
        /etc/init.d/dnsmasq restart 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        echo &quot;[✓] 完成&quot;
    fi
}

create_bypasslist() {
    echo &quot;[*] 创建 inet v2ray 表和 bypasslist 集合&quot;

    # 创建 table（如不存在）
    nft list table inet v2ray 2&amp;gt;/dev/null &amp;gt;/dev/null
    if [ $? -ne 0 ]; then
        nft add table inet v2ray
    fi

    # 创建或清空 set：bypasslist
    if nft list set inet v2ray bypasslist 2&amp;gt;/dev/null &amp;gt;/dev/null; then
        nft delete set inet v2ray bypasslist
    fi

    # 创建 bypasslist 集合
    nft add set inet v2ray bypasslist { type ipv4_addr\; flags interval\;}

    # 添加私有地址段
    echo &quot;[+] 添加内网地址段到 bypasslist&quot;
    nft add element inet v2ray bypasslist { \
        0.0.0.0/8, 10.0.0.0/8, 127.0.0.0/8, \
        169.254.0.0/16, 172.16.0.0/12, \
        192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4 \
    }

    # 加载国内 IP（来自文件）
    if [ -f &quot;$CHNROUTE_FILE&quot; ]; then
        echo &quot;[+] 加载国内 IP 到 bypasslist（来源: $CHNROUTE_FILE）&quot;
        BATCH_SIZE=1000
        count=0
        batch=&quot;&quot;

        echo &quot;[*] 正在批量导入到 nftables...&quot;

        while read -r line; do
            [ -z &quot;$line&quot; ] &amp;amp;&amp;amp; continue
            [ &quot;${line#\#}&quot; != &quot;$line&quot; ] &amp;amp;&amp;amp; continue

            batch=&quot;$batch $line,&quot;
            count=$((count + 1))

            if [ &quot;$count&quot; -ge &quot;$BATCH_SIZE&quot; ]; then
                batch=&quot;${batch%,}&quot;
                nft add element inet v2ray bypasslist { $batch }
                count=0
                batch=&quot;&quot;
            fi
        done &amp;lt; &quot;$CHNROUTE_FILE&quot;

        if [ -n &quot;$batch&quot; ]; then
            batch=&quot;${batch%,}&quot;
            nft add element inet v2ray bypasslist { $batch }
        fi

        echo &quot;[✓] 导入完成&quot;
    else
        echo &quot;[!] 未找到国内 IP 文件: $CHNROUTE_FILE&quot;
    fi

    # 加载 VPS 域名解析结果
    echo &quot;[+] 解析 $DOMAIN 并加入 bypasslist&quot;
    for ip in $(dig +short &quot;$DOMAIN&quot; @&quot;$DNS_SERVER&quot; | grep -Eo &apos;([0-9]{1,3}\.){3}[0-9]{1,3}&apos;); do
        nft add element inet v2ray bypasslist { $ip }
        echo &quot;    加入 $ip&quot;
    done
    echo &quot;    bypasslist 已载入 $(nft list set inet v2ray bypasslist | grep -oE &apos;[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?&apos; | wc -l) 条目&quot;

    # 创建 nat 类型链
    nft list chain inet v2ray prerouting 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || nft add chain inet v2ray prerouting { type nat hook prerouting priority dstnat\; }
    nft list chain inet v2ray output 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || nft add chain inet v2ray output { type nat hook output priority -100\; }
}

create_gfwlist(){
    echo &quot;[*] 创建 inet v2ray 表和 gfwlist 集合&quot;

    # 创建 table（如不存在）
    nft list table inet v2ray 2&amp;gt;/dev/null &amp;gt;/dev/null
    if [ $? -ne 0 ]; then
        nft add table inet v2ray
    fi

    # 创建或清空 set：gfwlist
    if nft list set inet v2ray gfwlist 2&amp;gt;/dev/null &amp;gt;/dev/null; then
        nft delete set inet v2ray gfwlist
    fi

    # 创建 gfwlist 集合
    nft add set inet v2ray gfwlist { type ipv4_addr\;}

    # 注意dnsmasq配置文件中也有gfwlist的内容，所以需要重新加载,此操作不会直接增加gfwlist条目数，只会在解析网址时动态增加
    /etc/init.d/dnsmasq reload 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    echo &quot;    gfwlist 已载入 $(nft list set inet v2ray gfwlist | grep -oE &apos;[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?&apos; | wc -l) 条目&quot;

    # 创建 nat 类型链
    nft list chain inet v2ray prerouting 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || nft add chain inet v2ray prerouting { type nat hook prerouting priority dstnat\; }
    nft list chain inet v2ray output 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || nft add chain inet v2ray output { type nat hook output priority -100\; }
}

enable_bypasslist_firewall_rules(){
    nft add rule inet v2ray prerouting ip daddr != @bypasslist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft add rule inet v2ray output ip daddr != @bypasslist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft add rule inet v2ray prerouting ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft add rule inet v2ray output ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft add rule inet v2ray prerouting ip daddr != @bypasslist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft add rule inet v2ray output ip daddr != @bypasslist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
}

disable_bypasslist_firewall_rules(){
    nft delete rule inet v2ray prerouting ip daddr != @bypasslist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft delete rule inet v2ray output ip daddr != @bypasslist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft delete rule inet v2ray prerouting ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft delete rule inet v2ray output ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft delete rule inet v2ray prerouting ip daddr != @bypasslist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft delete rule inet v2ray output ip daddr != @bypasslist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
}

enable_gfwlist_firewall_rules(){
    nft add rule inet v2ray prerouting ip daddr @gfwlist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft add rule inet v2ray output ip daddr @gfwlist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft add rule inet v2ray prerouting ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft add rule inet v2ray output ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft add rule inet v2ray prerouting ip daddr @gfwlist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft add rule inet v2ray output ip daddr @gfwlist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
}

disable_gfwlist_firewall_rules(){
    nft delete rule inet v2ray prerouting ip daddr @gfwlist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft delete rule inet v2ray output ip daddr @gfwlist tcp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft delete rule inet v2ray prerouting ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft delete rule inet v2ray output ip daddr ${LOCAL_IP} udp dport ${CHINADNS_MIN_PORT}-${V2RAY_MAX_DNS_PORT} return 2&amp;gt;/dev/null
    nft delete rule inet v2ray prerouting ip daddr @gfwlist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
    nft delete rule inet v2ray output ip daddr @gfwlist udp dport 0-65535 counter redirect to :${V2RAY_PORT} 2&amp;gt;/dev/null
}

disable_v2ray_rules() {
    if nft list table inet v2ray 2&amp;gt;/dev/null &amp;gt;/dev/null; then
        nft flush table inet v2ray
    else
        nft add table inet v2ray
    fi
    
    # 创建或清空 set：gfwlist
    if nft list set inet v2ray gfwlist 2&amp;gt;/dev/null &amp;gt;/dev/null; then
        nft delete set inet v2ray gfwlist
    fi

    # 创建 gfwlist 集合
    nft add set inet v2ray gfwlist { type ipv4_addr\;}
    set_multi_domestic_dns
    echo &quot;ingfw&quot; &amp;gt; /tmp/v2raymode.txt
    
}

stop_service()  {
    echo &quot;[+] 停止 v2ray 服务&quot;
    disable_v2ray_rules
}

enable_v2ray_rules(){
    running_v2ray_mode=$(cat /tmp/v2raymode.txt 2&amp;gt;/dev/null | tr -d &apos;\r&apos;)
    v2ray_mode=`uci get advancedconfig.@rules[0].v2raymode 2&amp;gt;/dev/null`

    if [ x${v2ray_mode} = x${running_v2ray_mode} ]; then
        echo &quot;[+] v2ray模式未变化&quot;
    else
        echo &quot;[+] v2ray模式已变化&quot;
        echo &quot;[+] 设置${v2ray_mode}模式中&quot;
        if [ &quot;${v2ray_mode}&quot; = &quot;outlands&quot; ]; then
            disable_gfwlist_firewall_rules
            create_bypasslist
            enable_bypasslist_firewall_rules
            set_multi_foreign_dns
        
        elif [ &quot;${v2ray_mode}&quot; = &quot;gfwlist&quot; ]; then
            disable_bypasslist_firewall_rules
            create_gfwlist
            enable_gfwlist_firewall_rules
            set_multi_foreign_dns
        
        elif [ &quot;${v2ray_mode}&quot; = &quot;ingfw&quot; ]; then
            disable_v2ray_rules
        fi
        echo &quot;${v2ray_mode}&quot; &amp;gt; /tmp/v2raymode.txt
    fi
}

start_service()  {
    echo &quot;[+] 启动 v2ray 服务&quot;
    mkdir -p /var/log/v2ray
    ulimit -n 65535
    procd_open_instance
    procd_set_param command $V2RAY_BIN run -config $V2RAY_CONF
    procd_set_param file $V2RAY_CONF
    procd_set_param respawn
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param pidfile /var/run/v2ray.pid
    enable_v2ray_rules
    procd_close_instance
}

service_triggers() {
    procd_add_reload_trigger &quot;advancedconfig&quot;
}
      
&lt;/pre&gt;

&lt;p&gt;2)修改/etc/dnsmasq.d/下的conf文件：&lt;/p&gt;

&lt;p&gt;将原来的所有&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
ipset=/xxxx.com/gfwlist
&lt;/pre&gt;

&lt;p&gt;全部修改为：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
nftset=/xxxx.com/4#inet#v2ray#gfwlist
&lt;/pre&gt;

&lt;p&gt;需要注意的是，conf文件不能有windows换行符，因为nftset对于格式非常敏感，之前windows换行符对于ipset没有问题，但是对于nftset就无法正常执行。&lt;/p&gt;

&lt;p&gt;3）对应的/etc/config/chinadns文件：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
config chinadns
	option chnroute &apos;/etc/chinadns_chnroute.txt&apos;
	option addr &apos;0.0.0.0&apos;
	option enable &apos;1&apos;
	option port &apos;5355&apos;
	option bidirectional &apos;0&apos;
	option server &apos;114.114.114.114,127.0.0.1:5354&apos;
&lt;/pre&gt;

&lt;p&gt;4）对应的/root/start_multi_chinadns.sh文件：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#!/bin/sh
# To use this file, install chinadns,v2ray,dnsmasq-full,coreutils-nohup first
domestic_dns_1=&quot;114.114.114.114&quot;
domestic_dns_2=&quot;119.29.29.29&quot;
domestic_dns_3=&quot;223.5.5.5&quot;
domestic_dns_4=&quot;180.76.76.76&quot;
localip=&quot;127.0.0.1&quot;
#chinadns_port_1=&quot;5354&quot;
chinadns_port_2=&quot;5357&quot;
chinadns_port_3=&quot;5359&quot;
chinadns_port_4=&quot;5361&quot;
#v2_dns_port_1=&quot;5355&quot;
v2_dns_port_2=&quot;5356&quot;
v2_dns_port_3=&quot;5358&quot;
v2_dns_port_4=&quot;5360&quot;
killall chinadns
/etc/init.d/chinadns restart
sleep 1
nohup /usr/bin/chinadns -m -b 0.0.0.0 -p ${chinadns_port_2} -s ${domestic_dns_2},${localip}:${v2_dns_port_2} -c /etc/chinadns_chnroute.txt 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
sleep 1
nohup /usr/bin/chinadns -m -b 0.0.0.0 -p ${chinadns_port_3} -s ${domestic_dns_3},${localip}:${v2_dns_port_3} -c /etc/chinadns_chnroute.txt 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
sleep 1
nohup /usr/bin/chinadns -m -b 0.0.0.0 -p ${chinadns_port_4} -s ${domestic_dns_4},${localip}:${v2_dns_port_4} -c /etc/chinadns_chnroute.txt 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/pre&gt;

&lt;p&gt;5）对应的/etc/config/v2ray配置：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
{
  &quot;inbounds&quot;: [
    {    
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
      &quot;port&quot;: 1060,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      &quot;sniffing&quot;: {
        &quot;enabled&quot;: false,
        &quot;destOverride&quot;: [&quot;http&quot;, &quot;tls&quot;]
      },
       &quot;settings&quot;: {
         &quot;network&quot;: &quot;tcp,udp&quot;,
         &quot;followRedirect&quot;: true 
       },
       &quot;streamSettings&quot;: {
            &quot;sockopt&quot;: {
            &quot;tproxy&quot;: &quot;redirect&quot; 
           }
       }
    },
    {
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      &quot;port&quot;: 5354,
      &quot;settings&quot;: {
        &quot;address&quot;: &quot;8.8.8.8&quot;,
        &quot;port&quot;: 53,
        &quot;network&quot;: &quot;udp&quot;,
        &quot;timeout&quot;: 0,
        &quot;followRedirect&quot;: false
      }
    },
    {
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      &quot;port&quot;: 5356,
      &quot;settings&quot;: {
        &quot;address&quot;: &quot;8.8.8.8&quot;,
        &quot;port&quot;: 53,
        &quot;network&quot;: &quot;udp&quot;,
        &quot;timeout&quot;: 0,
        &quot;followRedirect&quot;: false
      }
    },
    {
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      &quot;port&quot;: 5358,
      &quot;settings&quot;: {
        &quot;address&quot;: &quot;1.1.1.1&quot;,
        &quot;port&quot;: 53,
        &quot;network&quot;: &quot;udp&quot;,
        &quot;timeout&quot;: 0,
        &quot;followRedirect&quot;: false
      }
    },
    {
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      &quot;port&quot;: 5360,
      &quot;settings&quot;: {
        &quot;address&quot;: &quot;8.8.4.4&quot;,
        &quot;port&quot;: 53,
        &quot;network&quot;: &quot;udp&quot;,
        &quot;timeout&quot;: 0,
        &quot;followRedirect&quot;: false
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;vless&quot;,
      &quot;tag&quot;: &quot;proxy&quot;,
      &quot;settings&quot;: {
        &quot;vnext&quot;: [
          {
            &quot;address&quot;: &quot;xxx.com&quot;, #需改为实际网址
            &quot;port&quot;: 443,
            &quot;users&quot;: [
              {
                &quot;id&quot;: &quot;UUID&quot;, #需改为实际UUID
                &quot;encryption&quot;: &quot;none&quot;
              }
            ]
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;security&quot;: &quot;tls&quot;,
        &quot;wsSettings&quot;: {
          &quot;path&quot;: &quot;/path&quot;  #需改为实际路径
        },
        &quot;tcpSettings&quot;: {
          &quot;allowInsecureCiphers&quot;: false
        }
      }
    }
  ]
}

&lt;/pre&gt;

&lt;p&gt;参考：
1.chatgpt
2.https://www.abcde.im/archives/112.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>openwrt路由部署wireguard实现两地组网</title>
   <link href="https://jibenfa.github.io/openwrt/2024/12/19/openwrtE8B7AFE794B1E9A3A8E7BDB2wireguardE5AE9EE78EE7B8AEE4B8A4E59C84E7BB84E7BD91/"/>
   <updated>2024-12-19T06:12:12+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2024/12/19/openwrtE8B7AFE794B1E9A3A8E7BDB2wireguardE5AE9EE78EE7B8AEE4B8A4E59C84E7BB84E7BD91</id>
   <content type="html">&lt;p&gt;很久没升级路由了，最近openwrt和openvpn又更新版本了，导致之前的openwrt路由下opevpn互联配置出了些问题，连同Windows下tap模式访问局域网也失效了，配了半天都未成功，只能使用tun模式。&lt;/p&gt;

&lt;p&gt;然后研究了一下wireguard，发现配置比openvpn简单太多了。于是决定用wireguard。&lt;/p&gt;

&lt;p&gt;配置方法记录一下备忘：&lt;/p&gt;

&lt;p&gt;两个路由：&lt;/p&gt;

&lt;p&gt;路由A：具有外网ip和动态域名，内网网段172.24.1.0/24&lt;/p&gt;

&lt;p&gt;路由B：无外网ip，内网网段172.24.8.0/24&lt;/p&gt;

&lt;p&gt;1.两台路由均执行以下操作：&lt;/p&gt;

&lt;p&gt;1）安装wireguard，这里使用的是openwrt 23.05.5版本&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
opkg update
opkg install luci-app-wireguard kmod-wireguard wireguard-tools
&lt;/pre&gt;

&lt;p&gt;2）生成公私钥对&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
wg genkey | tee privatekey | wg pubkey &amp;gt; publickey
&lt;/pre&gt;

&lt;p&gt;3）调整防火墙（/etc/config/firewall），在末尾增加：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
config zone
        option name &apos;wg&apos;
        option input &apos;ACCEPT&apos;
        option forward &apos;ACCEPT&apos;
        option output &apos;ACCEPT&apos;
        option masq &apos;1&apos;
        option mtu_fix &apos;1&apos;
        list network &apos;wg0&apos;

config forwarding
        option src &apos;wg&apos;
        option dest &apos;lan&apos;

config forwarding
        option src &apos;lan&apos;
        option dest &apos;wg&apos;

config forwarding
        option src &apos;wg&apos;
        option dest &apos;lan&apos;

config rule
        option name &apos;wireguard&apos;
        option src &apos;wan&apos;
        option dest &apos;*&apos;
        option dest_port &apos;51820&apos;
        option target &apos;ACCEPT&apos;

&lt;/pre&gt;

&lt;p&gt;2.在路由A上设置网络接口（/etc/config/network），在最后增加：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
config interface &apos;wg0&apos;
        option proto &apos;wireguard&apos;
        option private_key &apos;路由A私钥&apos;
        list addresses &apos;10.168.10.1/24&apos;
        option listen_port &apos;51820&apos;

config wireguard_wg0
        option description &apos;router&apos;
        option public_key &apos;路由B公钥&apos;
        option persistent_keepalive &apos;25&apos;
        list allowed_ips &apos;10.168.10.3/32&apos;
        list allowed_ips &apos;172.24.8.0/24&apos;

config route
        option interface &apos;wg0&apos;
        option target &apos;172.24.8.0/24&apos;
        option gateway &apos;10.168.10.1&apos;
        option metric &apos;1&apos;
&lt;/pre&gt;

&lt;p&gt;3.在路由B上设置网络接口（/etc/config/network），在最后增加：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
config interface &apos;wg0&apos;
        option proto &apos;wireguard&apos;
        option private_key &apos;路由B私钥&apos;
        list addresses &apos;10.168.10.3/24&apos;
        option listen_port &apos;51820&apos;

config wireguard_wg0
        option description &apos;router_client1&apos;
        option public_key &apos;路由A公钥&apos;
        option endpoint_host &apos;路由A的ddns域名&apos;
        option endpoint_port &apos;51820&apos;
        option persistent_keepalive &apos;25&apos;
        list allowed_ips &apos;10.168.10.1/32&apos;
        list allowed_ips &apos;172.24.1.0/24&apos;

config route
        option interface &apos;wg0&apos;
        option target &apos;172.24.1.0/24&apos;
        option gateway &apos;10.168.10.3&apos;
        option metric &apos;1&apos;
&lt;/pre&gt;

&lt;p&gt;4.最后重启路由A和路由B，两个路由间的局域网就可以互相访问了&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;1.https://www.knightli.com/2022/04/14/openwrt-wireguard-connect-two-network/&lt;/p&gt;

&lt;p&gt;2.chatgpt&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>openwrt下解决dnsmasq cannot access directory 的问题</title>
   <link href="https://jibenfa.github.io/openwrt/2024/12/18/openwrtE4B88BE8A7A3E586B3dnsmasq20cannot20access20directory20E79A84E997AEE9A298/"/>
   <updated>2024-12-18T09:39:31+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2024/12/18/openwrtE4B88BE8A7A3E586B3dnsmasq20cannot20access20directory20E79A84E997AEE9A298</id>
   <content type="html">&lt;p&gt;最近更新了openwrt版本，结果设置dnsmasq-full的时候发现无法启动dnsmasq，查日志发现有个报错：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
daemon.crit dnsmasq[1]: cannot access directory /etc/dnsmasq.d: No such file or directory
&lt;/pre&gt;
&lt;p&gt;明明已经设置该文件夹为777权限了，还是有这个问题，后来查阅资料发现openwrt 22.03.0版本后，限制了dnsmasq的文件夹访问权限。&lt;/p&gt;

&lt;p&gt;处理方式是：&lt;/p&gt;

&lt;p&gt;1.将/etc/dnsmasq.conf下的配置注释掉或者删掉：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#conf-dir=/etc/dnsmasq.d
&lt;/pre&gt;
&lt;p&gt;2.在/etc/config/dhcp的配置文件中的dnsmasq配置中增加一条：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
config dnsmasq
	...
 	option confdir &apos;/etc/dnsmasq.d&apos;
	...
&lt;/pre&gt;
&lt;p&gt;3.重启dnsmasq服务即可。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;1.https://github.com/openwrt/openwrt/issues/10625&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>openwrt下新版openvpn设置</title>
   <link href="https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2021/05/07/openwrtE4B88BE696B0E78988openvpnE8AEBEE7BDAE/"/>
   <updated>2021-05-07T22:39:31+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2021/05/07/openwrtE4B88BE696B0E78988openvpnE8AEBEE7BDAE</id>
   <content type="html">&lt;p&gt;最近更新了openvpn版本，一些命令和设置跟以前不一样了。现记录一下：&lt;/p&gt;

&lt;p&gt;1.生成证书&lt;/p&gt;

&lt;p&gt;1）编辑/etc/easy-rsa/vars，修改部分内容&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;# Choose a size in bits for your keypairs. The recommended value is 2048.  Using
# 2048-bit keys is considered more than sufficient for many years into the
# future. Larger keysizes will slow down TLS negotiation and make key/DH param
# generation take much longer. Values up to 4096 should be accepted by most
# software. Only used when the crypto alg is rsa (see below.)

set_var EASYRSA_KEY_SIZE	4096

# In how many days should the root CA key expire?

set_var EASYRSA_CA_EXPIRE	3650

# In how many days should certificates expire?

set_var EASYRSA_CERT_EXPIRE	3650

# These are the default values for fields
# which will be placed in the certificate.
# Don&apos;t leave any of these fields blank.
export KEY_COUNTRY=&quot;xx&quot;
export KEY_PROVINCE=&quot;xx&quot;
export KEY_CITY=&quot;xxxx&quot;
export KEY_ORG=&quot;XXxxxx&quot;
export KEY_EMAIL=&quot;xxxxxx@gmail.com&quot;
export KEY_OU=&quot;XXxxxxxx&quot;
&lt;/pre&gt;

&lt;p&gt;2）接着生成证书和diffie-hellman key：&lt;br /&gt;
手工清空/etc/easy-rsa/下的key目录或者运行：&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
easyrsa clean-all  
easyrsa init-pki
&lt;/pre&gt;
&lt;p&gt;生成ca证书&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
easyrsa build-ca nopass 
&lt;/pre&gt;
&lt;p&gt;生成dh密钥&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
easyrsa gen-dh  
&lt;/pre&gt;
&lt;p&gt;服务器证书&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
easyrsa build-server-full server nopass
&lt;/pre&gt;
&lt;p&gt;客户端证书给coffeecat&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
easyrsa build-client-full coffeecat nopass
&lt;/pre&gt;
&lt;p&gt;生成ta.key&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
openvpn --genkey --secret ta.key
&lt;/pre&gt;

&lt;p&gt;3）拷贝到服务器目录下：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;cd /etc/easy-rsa/keys/
cp ca.crt ca.key dh4096.pem server.key server.crt ta.key /etc/openvpn/&lt;/pre&gt;

&lt;p&gt;4）将以下文件拷贝到客户端或者将文件的内容贴在客户端配置文件中（移动设备）：&lt;br /&gt;
ca.crt dh4096.pem coffeecat.key coffeecat.crt ta.key&lt;/p&gt;

&lt;p&gt;5）然后就是最关键的配置openvpn服务器端和客户端了：&lt;br /&gt;
路由器服务器端：&lt;br /&gt;
编辑/etc/config/openvpn :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：172.24.1.1为路由器的lan ip，10.1.1.0/24是为vpn客户端分配的ip段，一定要和路由器为lan dhcp的ip段错开。&lt;/em&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;

config openvpn &apos;tun_cert&apos;
	option port &apos;3366&apos;
	option proto &apos;tcp4&apos;
	option dev &apos;tun0&apos;
	option ca &apos;/etc/openvpn/ca.crt&apos;
	option cert &apos;/etc/openvpn/server.crt&apos;
	option key &apos;/etc/openvpn/server.key&apos;
	option dh &apos;/etc/openvpn/dh4096.pem&apos;
  	option tls_auth &apos;/etc/openvpn/ta.key 0&apos;
	option server &apos;10.1.1.0 255.255.255.0&apos;
	option client_config_dir &apos;/etc/openvpn/tunstatic&apos;
	option ccd_exclusive &apos;1&apos;
	option cipher &apos;AES-256-CBC&apos;
	option ifconfig_pool_persist &apos;/tmp/ipp2.txt&apos;
	option duplicate_cn &apos;1&apos;
	option client_to_client &apos;1&apos;
	option keepalive &apos;10 120&apos;
	option compress &apos;lzo&apos;
	option persist_key &apos;1&apos;
	option persist_tun &apos;1&apos;
	option status &apos;/tmp/openvpn-status2.log&apos;
	option verb &apos;3&apos;
	option topology &apos;subnet&apos;
	list push &apos;dhcp-option DNS 172.24.1.1&apos;
	list push &apos;redirect-gateway def1 local&apos;
	option enabled &apos;1&apos;
&lt;/pre&gt;

&lt;p&gt;在/etc/openvpn/tunstatic文件夹下创建名为coffeecat的文件，内容为：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
ifconfig-push 10.1.1.7 255.255.255.0
&lt;/pre&gt;

&lt;p&gt;然后在luci或者命令行启动openvpn：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;/etc/init.d/openvpn restart&lt;/pre&gt;

&lt;p&gt;ps一下有进程就对了&lt;/p&gt;

&lt;p&gt;openvpn客户端配置client.ovpn,此处设置为单文件模式：&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
client
dev tun
proto tcp4
connect-retry-max 5
connect-retry 5


remote 你的服务器地址 3366
resolv-retry infinite
nobind
float
persist-key
persist-tun
remote-cert-tls server
comp-lzo
verb 3
cipher		AES-256-CBC
tun-mtu		1500
key-direction 1

&amp;lt;tls-auth&amp;gt;
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
此处省略。。。。。
-----END OpenVPN Static key V1-----
&amp;lt;/tls-auth&amp;gt;

&amp;lt;ca&amp;gt;
-----BEGIN CERTIFICATE-----
此处省略。。。。。
-----END CERTIFICATE-----
&amp;lt;/ca&amp;gt;

&amp;lt;cert&amp;gt;
-----BEGIN CERTIFICATE-----
此处省略。。。。。
-----END CERTIFICATE-----
&amp;lt;/cert&amp;gt;

&amp;lt;key&amp;gt;
-----BEGIN PRIVATE KEY-----
此处省略。。。。。
-----END PRIVATE KEY-----
&amp;lt;/key&amp;gt;

&lt;/pre&gt;
&lt;p&gt;特别要注意的是，server配置文件中的：&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
option tls_auth &apos;/etc/openvpn/ta.key 0&apos;

&lt;/pre&gt;
&lt;p&gt;要和client配置文件中的：&lt;/p&gt;
&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
key-direction 1
&amp;lt;tls-auth&amp;gt;
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
此处省略。。。。。
-----END OpenVPN Static key V1-----
&amp;lt;/tls-auth&amp;gt;

&lt;/pre&gt;
&lt;p&gt;对应，否则无法连通。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;1.https://wallsee.org/2015/07/05/e588a9e794a8openvpne8bf9ce7a88be8bf9ee59b9ee5aeb6e9878ce8b7afe794b1e599a8e4b88ae58685e5a496e7bd91e38082e38082e38082.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>openwrt下基于DNSPOD的DDNS脚本</title>
   <link href="https://jibenfa.github.io/openwrt/%E7%BC%96%E7%A8%8B/2021/02/10/openwrte4b88be59fbae4ba8eDNSPODe79a84DDNSe8849ae69cac/"/>
   <updated>2021-02-10T07:25:57+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/%E7%BC%96%E7%A8%8B/2021/02/10/openwrte4b88be59fbae4ba8eDNSPODe79a84DDNSe8849ae69cac</id>
   <content type="html">&lt;p&gt;换dns供应商了，撸了一个openwrt下基于dnspod api的ddns脚本：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#!/bin/sh

TOKEN=&quot;xxx,xxxxxxxxxxxxxxx&quot;
DOMAIN_ID=&quot;xxxxxxxxx&quot;
SUB_DOMAIN=&quot;xxxx&quot;
MAIN_DOMAIN=&quot;xxxx&quot;
DOMAIN=${SUB_DOMAIN}.${MAIN_DOMAIN}
RECORD_ID=&quot;xxxxxx&quot;
#record_id is binding with sub_domain and main_domain, using following command to get record_id
#curl -X POST https://dnsapi.cn/Record.List -d &apos;login_token=${TOKEN}&amp;amp;format=json&amp;amp;domain_id=${DOMAIN_ID}&amp;amp;offset=0&amp;amp;length=3&apos;

#get domain ip from common dns
IP=`dig ${DOMAIN} @114.114.114.114 | awk -F &quot;[ ]+&quot; &apos;/IN/{print $1}&apos; | awk &apos;NR==2 {print $5}&apos;`
echo &quot;Ip of ${DOMAIN} is ---${IP}---&quot;

#get local ip from wan port
LIP=`ifconfig pppoe-wan|awk -F &quot;[: ]+&quot; &apos;/inet addr/{print $4}&apos;`
echo &quot;Local Ip is ---${LIP}---&quot;

#if domain ip and local ip are identical, dns is ok
if [ &quot;${LIP}&quot; == &quot;${IP}&quot; ]; then
   echo &quot;Doman IP not changed.&quot;
   exit
fi

#if not identical, check dns record from ddns service provider
echo &quot;check dnspod dns record of ${DOMAIN}&quot;
query_cmd=&quot;curl -X POST https://dnsapi.cn/Record.Info -d &apos;login_token=${TOKEN}&amp;amp;format=json&amp;amp;domain_id=${DOMAIN_ID}&amp;amp;record_id=${RECORD_ID}&apos;&quot;
query_result=`eval ${query_cmd}`
query_result_sub_str=`echo &quot;${query_result}&quot; | grep ${LIP}`

#if dns record is ok, there is no need to update
if [ ${#query_result_sub_str} -gt 6 ]; then
   echo &quot;IP record is OK, waiting for dns spread&quot;
   exit
fi

#if dns record is not ok, start ddns refresh
echo &quot;start ddns refresh&quot;
refresh_cmd=&quot;curl -X POST https://dnsapi.cn/Record.Ddns -d &apos;login_token=${TOKEN}&amp;amp;format=json&amp;amp;domain_id=${DOMAIN_ID}&amp;amp;record_id=${RECORD_ID}&amp;amp;record_line_id=0&amp;amp;value=${LIP}&amp;amp;sub_domain=${SUB_DOMAIN}&apos;&quot;
refreah_result=`eval ${refresh_cmd}`
echo &quot;${refreah_result}&quot;
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>v2ray的ws模式在openwrt上的全局和白名单的优化配置</title>
   <link href="https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2020/03/24/v2rayE79A84wsE6A8A1E5BC8FE59CA8openwrtE4B88AE79A84E585A8E5B180E5928CE799BDE5908DE58D95E79A84E4BC98E58C96E9858DE7BDAE/"/>
   <updated>2020-03-24T14:25:57+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2020/03/24/v2rayE79A84wsE6A8A1E5BC8FE59CA8openwrtE4B88AE79A84E585A8E5B180E5928CE799BDE5908DE58D95E79A84E4BC98E58C96E9858DE7BDAE</id>
   <content type="html">&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;随着v2ray的ws+tls+cdn成为标配，openwrt上对应的透明代理的配置一般有两种模式：&lt;/p&gt;

&lt;p&gt;1.白名单代理模式。&lt;/p&gt;

&lt;p&gt;优点是：网页加载速度较全局模式快&lt;/p&gt;

&lt;p&gt;缺点是：不加入gfwlist且被墙的网站打不开，需要手动加白名单&lt;/p&gt;

&lt;p&gt;2.境外全局代理模式。&lt;/p&gt;

&lt;p&gt;优点是：所有被墙的网站都能打开，不用维护复杂的gfwlist&lt;/p&gt;

&lt;p&gt;缺点是：网页加载速度较白名单代理模式慢一些&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;二、为什么要优化&lt;/p&gt;

&lt;p&gt;所谓的优化配置，主要是解决几个问题：&lt;/p&gt;

&lt;p&gt;1.简化v2ray的配置，尽量不使用sniffing嗅探、geoip、geosite等，一方面提升v2ray的速度和稳定性，一方面可以减少路由空间的占用（可以使用空库的geoip和geosite，只需共用chinadns的数据文件）&lt;/p&gt;

&lt;p&gt;2.简化firewall规则配置，尽量减少ipset条目，不影响境内网站的访问速度，同时保证可以访问外网。&lt;/p&gt;

&lt;p&gt;3.使用chinadns解决dns污染问题，保证ping外网的时候能正确获得ip，且利用apnic的网址列表来区分境内外。&lt;/p&gt;

&lt;p&gt;4.通过自定义luci页面，实现全局和白名单模式灵活切换&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;三、怎么进行优化&lt;/p&gt;

&lt;p&gt;下面以ws+tls+cdn为例：&lt;/p&gt;

&lt;p&gt;1.v2ray服务器端配置参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wallsee.org/2019/06/14/v2ray2bLetsEncrypt2bcdne983a8e7bdb2.html&quot;&gt;配置的一至三小节&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.chinadns在openwrt的配置参考：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
config chinadns
	option chnroute &apos;/etc/chinadns_chnroute.txt&apos;
	option addr &apos;0.0.0.0&apos;
	option enable &apos;1&apos;
	option port &apos;5454&apos;
	option server &apos;114.114.114.114,127.0.0.1:5354&apos;
	option bidirectional &apos;0&apos;
&lt;/pre&gt;

&lt;p&gt;3.v2ray在openwrt客户端的配置为：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
{
    &quot;inbounds&quot;: [
      {    
        &quot;protocol&quot;: &quot;dokodemo-door&quot;,
        &quot;port&quot;: 1060,
        &quot;listen&quot;:&quot;0.0.0.0&quot;,
        &quot;sniffing&quot;: {
          &quot;enabled&quot;: false,
          &quot;destOverride&quot;: [&quot;http&quot;, &quot;tls&quot;]
        },
         &quot;settings&quot;: {
           &quot;network&quot;: &quot;tcp,udp&quot;,
           &quot;followRedirect&quot;: true 
         },
         &quot;streamSettings&quot;: {
              &quot;sockopt&quot;: {
              &quot;tproxy&quot;: &quot;redirect&quot; 
             }
         }
      },
      {
        &quot;protocol&quot;: &quot;dokodemo-door&quot;,
        &quot;listen&quot;:&quot;0.0.0.0&quot;,
        &quot;port&quot;: 5354,
        &quot;settings&quot;: {
          &quot;address&quot;: &quot;8.8.8.8&quot;,
          &quot;port&quot;: 53,
          &quot;network&quot;: &quot;udp&quot;,
          &quot;timeout&quot;: 0,
          &quot;followRedirect&quot;: false
        }
      },
      {
        &quot;protocol&quot;: &quot;dokodemo-door&quot;,
        &quot;listen&quot;:&quot;0.0.0.0&quot;,
        &quot;port&quot;: 5355,
        &quot;settings&quot;: {
          &quot;address&quot;: &quot;8.8.8.8&quot;,
          &quot;port&quot;: 53,
          &quot;network&quot;: &quot;udp&quot;,
          &quot;timeout&quot;: 0,
          &quot;followRedirect&quot;: false
        }
      },
      {
        &quot;protocol&quot;: &quot;dokodemo-door&quot;,
        &quot;listen&quot;:&quot;0.0.0.0&quot;,
        &quot;port&quot;: 5356,
        &quot;settings&quot;: {
          &quot;address&quot;: &quot;1.1.1.1&quot;,
          &quot;port&quot;: 53,
          &quot;network&quot;: &quot;udp&quot;,
          &quot;timeout&quot;: 0,
          &quot;followRedirect&quot;: false
        }
      },
      {
        &quot;protocol&quot;: &quot;dokodemo-door&quot;,
        &quot;listen&quot;:&quot;0.0.0.0&quot;,
        &quot;port&quot;: 5357,
        &quot;settings&quot;: {
          &quot;address&quot;: &quot;8.8.4.4&quot;,
          &quot;port&quot;: 53,
          &quot;network&quot;: &quot;udp&quot;,
          &quot;timeout&quot;: 0,
          &quot;followRedirect&quot;: false
        }
      }
    ],
    &quot;outbounds&quot;: [
      {
        &quot;protocol&quot;: &quot;vmess&quot;,
        &quot;tag&quot;: &quot;proxy&quot;,
        &quot;settings&quot;: {
          &quot;vnext&quot;: [
            {
              &quot;address&quot;: &quot;你的vps域名&quot;,
              &quot;port&quot;: 443,
              &quot;users&quot;: [
                {
                  &quot;id&quot;: &quot;你的uuid&quot;,
                  &quot;alterId&quot;: 64,
                  &quot;testsEnabled&quot;: &quot;VMessAEAD&quot;
                }
              ]
            }
          ]
        },
        &quot;streamSettings&quot;: {
          &quot;network&quot;: &quot;ws&quot;,
          &quot;security&quot;: &quot;tls&quot;,
          &quot;wsSettings&quot;: {
            &quot;path&quot;: &quot;你的路径&quot;
          },
          &quot;tcpSettings&quot;: {
            &quot;allowInsecureCiphers&quot;: false
          }
        }
      }
    ]
  }
  
  
  
&lt;/pre&gt;

&lt;p&gt;4.新建luci菜单配置v2ray：&lt;/p&gt;

&lt;p&gt;(1).新建/etc/config/advancedconfig，内容为：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;

config arguments

config rules
	option v2raymode &apos;gfwlist&apos;

&lt;/pre&gt;

&lt;p&gt;(2)新建/usr/lib/lua/luci/controller/advancedconfig.lua，内容为：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;

--/usr/lib/lua/luci/controller/advancedconfig.lua
module(&quot;luci.controller.advancedconfig&quot;, package.seeall)
function index()
        if not nixio.fs.access(&quot;/etc/config/advancedconfig&quot;) then
                return
        end
        page = entry({&quot;admin&quot;, &quot;services&quot;, &quot;advancedconfig&quot;},
		cbi(&quot;advancedconfig&quot;),
		_(&quot;高级设置&quot;), 70)
	page.dependent = true
	page.acl_depends = { &quot;luci-app-firewall&quot; }
end

&lt;/pre&gt;

&lt;p&gt;(3).新建/usr/lib/lua/luci/model/cbi/advancedconfig.lua，内容为：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
--/usr/lib/lua/luci/model/cbi/advancedconfig.lua
local fs = require &quot;nixio.fs&quot;

m=Map(&quot;advancedconfig&quot;,translate(&quot;高级设置&quot;), translate(&quot;各类服务内置脚本文档的直接编辑，要求必须提前安装v2ray，chinadns，dnsmasq-full，否则功能会不正常&quot;))
s=m:section(TypedSection,&quot;arguments&quot;,&quot;&quot;)
s.addremove=false
s.anonymous=true


--配置1开始
if nixio.fs.access(&quot;/etc/dnsmasq.d/custom.conf&quot;) then
s:tab(&quot;config1&quot;, translate(&quot;编辑gfwlist自定义解析文件&quot;),translate(&quot;&lt;p&gt;本页是编辑/etc/dnsmasq.d/custom.conf的内容，gfwlist中的固定网站已经添加，此文件是额外的自定义解析文件，示例：&lt;p&gt; 1.在gfwlist白名单模式下，如要添加xxx.com网站走代理，则增加两行：&lt;p&gt; server=/xxx.com/127.0.0.1#5353 &lt;p&gt; ipset=/xxx.com/gfwlist &lt;p&gt;（其中5353是chinadns上游服务器的监听端口）。&lt;p&gt; 2.在gfwlist白名单模式下，如果要添加333.com 直连不走代理，则增加一行：&lt;p&gt; server=/333.com/114.114.114.114 &lt;p&gt;3.在任何一种模式下如需防止bbb.com的dns查询泄露，则增加一行：&lt;p&gt; server=/bbb.com/127.0.0.1#5353 &lt;p&gt;（其中5353是chinadns上游服务器的监听端口）。&lt;p&gt; &quot;))
view_cfg1 = s:taboption(&quot;config1&quot;, TextValue, &quot;editconf1&quot;, nil, translate(&quot;每行开头的符号（＃）被视为注释；删除（#）启用指定选项。&quot;))

view_cfg1.rmempty = false
view_cfg1.rows = 30

function view_cfg1.cfgvalue(self, section)
    return nixio.fs.readfile(&quot;/etc/dnsmasq.d/custom.conf&quot;) or &quot;&quot;
end

function view_cfg1.write(self, section, value)
    if value then
        value = value:gsub(&quot;\r\n?&quot;, &quot;\n&quot;)
	      local old_value = nixio.fs.readfile(&quot;/etc/dnsmasq.d/custom.conf&quot;)
	      if value ~= old_value then
		       nixio.fs.writefile(&quot;/etc/dnsmasq.d/custom.conf&quot;, value)
           luci.sys.call(&quot;/etc/init.d/dnsmasq restart &amp;gt;/dev/null&quot;)
        end
    end
end

end
--配置1结束

--配置2开始
if nixio.fs.access(&quot;/etc/config/v2ray.json&quot;) then
s:tab(&quot;config2&quot;, translate(&quot;编辑v2ray配置文件&quot;),translate(&quot;&lt;p&gt;本页是编辑/etc/config/v2ray.json的内容。&lt;p&gt;&quot;))

view_cfg2 = s:taboption(&quot;config2&quot;, TextValue, &quot;editconf2&quot;, nil, translate(&quot;每行开头的符号（＃）被视为注释；删除（#）启用指定选项。&quot;))

view_cfg2.rmempty = false
view_cfg2.rows = 30


function view_cfg2.cfgvalue(self, section)
    return nixio.fs.readfile(&quot;/etc/config/v2ray.json&quot;) or &quot;&quot;
end

function view_cfg2.write(self, section, value)
    if value then
        value = value:gsub(&quot;\r\n?&quot;, &quot;\n&quot;)
	      local old_value = nixio.fs.readfile(&quot;/etc/config/v2ray.json&quot;)
	      if value ~= old_value then
		       nixio.fs.writefile(&quot;/etc/config/v2ray.json&quot;, value)
           luci.sys.call(&quot;/etc/init.d/v2ray restart &amp;gt;/dev/null&quot;)
        end
    end
end

end
--配置2结束


s2=m:section(TypedSection,&quot;rules&quot;,&quot;&quot;)
s2.addremove=false
s2.anonymous=true
s2:tab(&quot;config3&quot;, translate(&quot;选择v2ray的运行模式&quot;),translate(&quot;&lt;p&gt;本模块是选择v2ray的运行模式，支持三种模式：白名单模式，境外全局代理模式，墙内上网模式。&lt;p&gt;&quot;))
c = s2:taboption(&quot;config3&quot;, ListValue, &quot;v2raymode&quot;,nil ,translate(&quot;代理模式：白名单模式速度较快，但未添加的被墙网站打不开，境外全局代理模式速度较慢，但所有网站都能打开&quot;))
c:value(&quot;gfwlist&quot;, translate(&quot;白名单模式&quot;))
c:value(&quot;outlands&quot;, translate(&quot;境外全局模式&quot;))
c:value(&quot;ingfw&quot;, translate(&quot;墙内上网模式&quot;))
c.default = &quot;gfwlist&quot;

function c.write(self, section, value)   
    ListValue.write(self, section, value)
    nixio.fs.writefile(&quot;/tmp/v2raymode.txt&quot;, value)
    if value ~= &quot;ingfw&quot; then
        luci.sys.call(&quot;/etc/init.d/v2ray restart &amp;gt;/dev/null&quot;)
    else
        luci.sys.call(&quot;/etc/init.d/v2ray stop &amp;gt;/dev/null&quot;)
    end
end

return m


&amp;lt;/pre&amp;gt;


重头戏来了~~~~

5.在openwrt上修改/etc/init.d/v2ray，（注意要提前安装好：chinadns,v2ray,dnsmasq-full,coreutils-nohup），内容为：


&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#!/bin/sh /etc/rc.common
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#
# To use this file, install chinadns,v2ray,dnsmasq-full,coreutils-nohup first
#
START=90

USE_PROCD=1
LimitNOFILE=1048576
LimitNPROC=512

DOMAIN=&quot;v2ray的vps的ip&quot;
domestic_dns_1=&quot;114.114.114.114&quot;
domestic_dns_2=&quot;119.29.29.29&quot;
domestic_dns_3=&quot;223.5.5.5&quot;
domestic_dns_4=&quot;180.76.76.76&quot;
localip=&quot;127.0.0.1&quot;
chinadns_port_2=&quot;5555&quot;
chinadns_port_3=&quot;5656&quot;
chinadns_port_4=&quot;5757&quot;

set_multi_domestic_dns() {
    current_dns_list=`uci get dhcp.@dnsmasq[0].server 2&amp;gt;/dev/null`
    if [ x${domestic_dns_1:0:15} != x${current_dns_list:0:15} ]; then
        echo &quot;setting domestic dns&quot; 
        uci -q delete dhcp.@dnsmasq[0].server
        uci add_list dhcp.@dnsmasq[0].server=${domestic_dns_1}
        uci add_list dhcp.@dnsmasq[0].server=${domestic_dns_2}
        uci add_list dhcp.@dnsmasq[0].server=${domestic_dns_3}
        uci add_list dhcp.@dnsmasq[0].server=${domestic_dns_4}
        uci set dhcp.@dnsmasq[0].noresolv=0
        uci set dhcp.@dnsmasq[0].nohosts=0
        uci commit dhcp
        /etc/init.d/dnsmasq restart 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        echo &quot;done&quot;
    fi
}

set_multi_foreign_dns() {
    current_dns_list=`uci get dhcp.@dnsmasq[0].server 2&amp;gt;/dev/null`
    if [ x${localip:0:9} != x${current_dns_list:0:9} ]; then
        echo &quot;setting foreign dns&quot;
        chinadns_port=`uci get chinadns.@chinadns[0].port 2&amp;gt;/dev/null`
        chinadns_listen_ipport=${localip}&quot;#&quot;${chinadns_port}
        uci -q delete dhcp.@dnsmasq[0].server
        uci add_list dhcp.@dnsmasq[0].server=${chinadns_listen_ipport}
        uci add_list dhcp.@dnsmasq[0].server=&quot;${localip}#${chinadns_port_2}&quot;
        uci add_list dhcp.@dnsmasq[0].server=&quot;${localip}#${chinadns_port_3}&quot;
        uci add_list dhcp.@dnsmasq[0].server=&quot;${localip}#${chinadns_port_4}&quot;
        uci set dhcp.@dnsmasq[0].noresolv=1
        uci set dhcp.@dnsmasq[0].nohosts=1
        uci commit dhcp
        /etc/init.d/dnsmasq restart 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        echo &quot;done&quot;
    fi
}

create_bypasslist(){
    ##########################################################################################################  
    bypasscount=`ipset list bypasslist | wc -l`    
      
    if [ $bypasscount -le 1 ]; then
        #create ipset list
        ipset create bypasslist hash:net family inet hashsize 1024 maxelem 65535
          
        #add private address
        ipset add bypasslist 0.0.0.0/8
        ipset add bypasslist 10.0.0.0/8
        ipset add bypasslist 127.0.0.0/8
        ipset add bypasslist 169.254.0.0/16
        ipset add bypasslist 172.16.0.0/12
        ipset add bypasslist 192.168.0.0/16
        ipset add bypasslist 224.0.0.0/4
        ipset add bypasslist 240.0.0.0/4
          
        #add china ip list from apnic
        for line in $(cat /etc/chinadns_chnroute.txt)
        do
            ipset add bypasslist $line
        done
    fi

    #by pass vps server ip
    sleep 1
    #SIP=` ping ${DOMAIN} -c 1 |awk &apos;NR==2 {print $4}&apos; |awk -F &apos;:&apos; &apos;{print $1}&apos;`
    SIP=`dig +short ${DOMAIN} @${domestic_dns_1}`
    if [ x&quot;${SIP}&quot; != x ]; then
        for eachip in ${SIP}
        do
            #echo &quot;${eachip}&quot;
            ipset add bypasslist ${eachip}
        done
    fi
    ##########################################################################################################
}

create_gfwlist(){
    ##########################################################################################################
    gfcount=`ipset list gfwlist | wc -l`    
      
    if [ $gfcount -le 1 ]; then
        ipset -N gfwlist iphash
         
        #add telegram server
        ipset add gfwlist 93.119.240.0/24
        ipset add gfwlist 93.119.241.0/24
        ipset add gfwlist 93.119.242.0/24
        ipset add gfwlist 93.119.243.0/24
        ipset add gfwlist 93.119.244.0/24
        ipset add gfwlist 93.119.245.0/24
        ipset add gfwlist 93.119.246.0/24
        ipset add gfwlist 93.119.247.0/24
        ipset add gfwlist 93.119.248.0/24
        ipset add gfwlist 93.119.249.0/24
        ipset add gfwlist 93.119.250.0/24
        ipset add gfwlist 93.119.251.0/24
        ipset add gfwlist 93.119.252.0/24
        ipset add gfwlist 93.119.253.0/24
        ipset add gfwlist 93.119.254.0/24
        ipset add gfwlist 93.119.255.0/24
        ipset add gfwlist 149.154.172.0/22
        ipset add gfwlist 91.108.12.0/22
        ipset add gfwlist 149.154.160.0/20
        ipset add gfwlist 149.154.164.0/22
        ipset add gfwlist 91.108.4.0/22
        ipset add gfwlist 91.108.56.0/22
        ipset add gfwlist 91.108.8.0/22
        
    fi
    ########################################################################################################
}

enable_bypasslist_firewall_rules(){
    ########################################################################################################
    iptables -t nat -A PREROUTING -p tcp -m set ! --match-set bypasslist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    iptables -t nat -A OUTPUT -p tcp -m set ! --match-set bypasslist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    ########################################################################################################
}

disable_bypasslist_firewall_rules(){
    ########################################################################################################
    iptables -t nat -D PREROUTING -p tcp -m set ! --match-set bypasslist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    iptables -t nat -D OUTPUT -p tcp -m set ! --match-set bypasslist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    ########################################################################################################
}

enable_gfwlist_firewall_rules(){
    ########################################################################################################
    iptables -t nat -A PREROUTING -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    iptables -t nat -A OUTPUT -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    ########################################################################################################
}

disable_gfwlist_firewall_rules(){
    ########################################################################################################
    iptables -t nat -D PREROUTING -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    iptables -t nat -D OUTPUT -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1060 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
    ########################################################################################################
}

disable_v2ray_rules() {
    ########################################################################################################
    v2_mode=`cat /tmp/v2raymode.txt 2&amp;gt;/dev/null`
    disable_gfwlist_firewall_rules
    disable_bypasslist_firewall_rules
    if [ &quot;${v2_mode}&quot; = &quot;ingfw&quot; ]; then
        set_multi_domestic_dns
    fi
    ########################################################################################################
}

stop_service()  {
    echo &quot;stopping v2ray service&quot;
    disable_v2ray_rules
}

enable_v2ray_rules(){
    ########################################################################################################
    v2ray_mode=`cat /tmp/v2raymode.txt 2&amp;gt;/dev/null`
    if [ x${v2ray_mode} = x ]; then
        v2ray_mode=`uci get advancedconfig.@rules[0].v2raymode 2&amp;gt;/dev/null`
        echo &quot;setting ${v2ray_mode} mode&quot;
        echo &quot;${v2ray_mode}&quot; &amp;gt; /tmp/v2raymode.txt
    fi
    if [ &quot;${v2ray_mode}&quot; = &quot;outlands&quot; ]; then
        create_bypasslist
        disable_gfwlist_firewall_rules
        enable_bypasslist_firewall_rules
        set_multi_foreign_dns
    elif [ &quot;${v2ray_mode}&quot; = &quot;gfwlist&quot; ]; then
        create_gfwlist
        disable_bypasslist_firewall_rules
        enable_gfwlist_firewall_rules
        set_multi_foreign_dns
    else
        stop
    fi
    ########################################################################################################
}

start_service()  {
    echo &quot;starting v2ray service&quot;
    mkdir /var/log/v2ray &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
    ulimit -n 99999
    procd_open_instance
    procd_set_param respawn
#    procd_set_param command /usr/bin/v2ray -config /etc/config/v2ray.json
    procd_set_param command /usr/bin/v2rayx64/v2ray -config /etc/config/v2ray.json
    procd_set_param file /etc/config/v2ray.json
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param pidfile /var/run/v2ray.pid
    enable_v2ray_rules
    procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger &quot;advancedconfig&quot;
}

&lt;/pre&gt;


两种模式都可以使用同一个v2ray的openwrt客户端配置，其中境外全局模式的防火墙配置非常简洁，看起来很舒服。。。

6.最后设置一个多进程的chinadns启动脚本，start_multi_chinadns.sh，内容为：
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#!/bin/sh
# To use this file, install chinadns,v2ray,dnsmasq-full,coreutils-nohup first
domestic_dns_1=&quot;114.114.114.114&quot;
domestic_dns_2=&quot;119.29.29.29&quot;
domestic_dns_3=&quot;223.5.5.5&quot;
domestic_dns_4=&quot;180.76.76.76&quot;
localip=&quot;127.0.0.1&quot;
chinadns_port_2=&quot;5555&quot;
chinadns_port_3=&quot;5656&quot;
chinadns_port_4=&quot;5757&quot;
v2_dns_port_2=&quot;5355&quot;
v2_dns_port_3=&quot;5356&quot;
v2_dns_port_4=&quot;5357&quot;
killall chinadns
/etc/init.d/chinadns restart
sleep 1
nohup /usr/bin/chinadns -m -b 0.0.0.0 -p ${chinadns_port_2} -s ${domestic_dns_2},${localip}:${v2_dns_port_2} -c /etc/chinadns_chnroute.txt 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
sleep 1
nohup /usr/bin/chinadns -m -b 0.0.0.0 -p ${chinadns_port_3} -s ${domestic_dns_3},${localip}:${v2_dns_port_3} -c /etc/chinadns_chnroute.txt 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
sleep 1
nohup /usr/bin/chinadns -m -b 0.0.0.0 -p ${chinadns_port_4} -s ${domestic_dns_4},${localip}:${v2_dns_port_4} -c /etc/chinadns_chnroute.txt 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;

&lt;/pre&gt;
设置在rc.local中作为启动项，即可在openwrt启动的时候带起4个进程的chinadns。

附：luci的效果图如下：

&lt;img src=&quot;https://jibenfa.github.io/uploads/2020/03/screencapture-2020-03-29-20_27_10.png&quot; width=&quot;900&quot; height=&quot;1100&quot; alt=&quot;AltText&quot; /&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>定制esxi6.7镜像文件</title>
   <link href="https://jibenfa.github.io/%E8%99%9A%E6%8B%9F%E5%8C%96/2020/01/20/e5ae9ae588b6esxi6.7e9959ce5838fe69687e4bbb6/"/>
   <updated>2020-01-20T08:25:57+00:00</updated>
   <id>https://jibenfa.github.io/%E8%99%9A%E6%8B%9F%E5%8C%96/2020/01/20/e5ae9ae588b6esxi6.7e9959ce5838fe69687e4bbb6</id>
   <content type="html">&lt;p&gt;最近升级了服务器，使用了x550万兆网卡，于是想在esxi6.7中集成最新的1.8.7的网卡驱动，折腾了3个小时，终于搞定：&lt;/p&gt;

&lt;p&gt;1.下载并安装VMware-PowerCLI-6.5.0和ESXi-Customizer-PS封装工具&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;

VMware-PowerCLI-6.5.0-4624819

ESXi-Customizer-PS-v2.6.0.ps1（绿色版）

&lt;/pre&gt;

&lt;p&gt;2.下载ESXI6.7 offline bundle&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;

ESXi670-201912001.zip 放到和ESXi-Customizer同一个文件夹下

&lt;/pre&gt;

&lt;p&gt;3.升级powershell至3.0版本以上（win10自带的是5.1，无需升级）&lt;/p&gt;

&lt;p&gt;4.下载网卡驱动&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;

VMware ESXi 6.7 ixgben 1.8.7 NIC Driver for Intel Ethernet Controllers 82599, x520, x540, x550, x552 and x553 family

https://my.vmware.com/web/vmware/details?productId=742&amp;amp;downloadGroup=ESXI67U3B#drivers_tools

&lt;/pre&gt;
&lt;p&gt;解压驱动到D:\vmware67u3b\vib\&lt;/p&gt;

&lt;p&gt;5.用管理员权限打开powershell，切换至ESXi-Customizer所在文件夹，执行以下命令：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;

1).Powershell中默认禁止执行脚本，所以先修改策略允许执行

Set-ExecutionPolicy Unrestricted

2).禁止签名校验需修改2个参数(环境参数中nosignaturecheck改成true，另外打包命令后增加-nsc)

$DeployNoSignatureCheck=$true

 .\ESXi-Customizer-PS-v2.6.0.ps1 -izip .\ESXi670-201912001.zip -pkgDir D:\vmware67u3b\vib\ -nsc
 
&lt;/pre&gt;

&lt;p&gt;如果出现了all done,就表示成功了，可以在上述文件夹下找到ESXi-6.7.0-20191204001-standard-customized.iso&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>perl使用mime发送带附件的邮件</title>
   <link href="https://jibenfa.github.io/%E7%BC%96%E7%A8%8B/2019/08/24/perle4bdbfe794a8mimee58f91e98081e5b8a6e99984e4bbb6e79a84e982aee4bbb6/"/>
   <updated>2019-08-24T11:38:57+00:00</updated>
   <id>https://jibenfa.github.io/%E7%BC%96%E7%A8%8B/2019/08/24/perle4bdbfe794a8mimee58f91e98081e5b8a6e99984e4bbb6e79a84e982aee4bbb6</id>
   <content type="html">&lt;p&gt;好久不用perl脚本写东西了，今天突发奇想，需要自动发送带附件的邮件，网上找了很多资料，修改了一下，就是这样了，先用ppm安装MIME::Lite和Authen::SASL包&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#!/usr/bin/perl -w
use strict;
use warnings;
use MIME::Lite;
use MIME::Base64;
use Authen::SASL;
 
  my $from = &apos;发件人邮箱&apos;;
  my $passwd = &apos;发件人邮箱密码&apos;;
  my $to = &apos;收件人邮箱&apos;;
  my $subject = &quot;标题&quot;
  my $content = &quot;正文内容&quot;;
  my $fileone = &apos;z:\\123.png&apos;;
  my $filetwo = &apos;z:\\456.png&apos;;
  my $msg = MIME::Lite-&amp;gt;new(
      From     =&amp;gt;  $from,
      To       =&amp;gt;  $to,
      Subject  =&amp;gt;  $subject,
      Type     =&amp;gt;  &apos;TEXT&apos;,
      Data     =&amp;gt;  $content,
  );
  $msg-&amp;gt;attach (
   Type        =&amp;gt; &apos;AUTO&apos;,
   Path        =&amp;gt; $fileone,
   Filename    =&amp;gt; &quot;1111.png&quot;,
   Disposition =&amp;gt; &apos;attachment&apos;
   ) or die &quot;Error adding $fileone: $!\n&quot;;
   $msg-&amp;gt;attach (
   Type        =&amp;gt; &apos;AUTO&apos;,
   Path        =&amp;gt; $filetwo,
   Filename    =&amp;gt; &quot;2222.png&quot;,
   Disposition =&amp;gt; &apos;attachment&apos;
   ) or die &quot;Error adding $filetwo: $!\n&quot;;
  
  
  MIME::Lite-&amp;gt;send(&apos;smtp&apos;,&apos;smtp邮箱服务器&apos;,
      Debug   =&amp;gt;&apos;0&apos;,
      AuthUser=&amp;gt;$from,
      AuthPass=&amp;gt;$passwd,
  );
  $msg-&amp;gt;send;
  &lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>v2ray+LetsEncrypt+cdn部署</title>
   <link href="https://jibenfa.github.io/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2019/06/14/v2ray2bLetsEncrypt2bcdne983a8e7bdb2/"/>
   <updated>2019-06-14T14:46:57+00:00</updated>
   <id>https://jibenfa.github.io/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2019/06/14/v2ray2bLetsEncrypt2bcdne983a8e7bdb2</id>
   <content type="html">&lt;p&gt;为了拯救被墙的ip，参考了一些资料，最终实现了v2ray+LetsEncrypt+cdn部署。
首先是申请一个域名，example.com&lt;/p&gt;

&lt;p&gt;一、vps部署Nginx和LetsEncrypt&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
apt update
apt install nginx -y
apt-get update
apt-get install software-properties-common
add-apt-repository universe
add-apt-repository ppa：certbot/certbot
apt-get update
apt-get install certbot python-certbot-nginx 
&lt;/pre&gt;

&lt;p&gt;自动安装Nginx证书：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
certbot --nginx
&lt;/pre&gt;

&lt;p&gt;然后crontab -e增加计划任务，自动更新https证书&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
certbot renew --dry-run
&lt;/pre&gt;

&lt;p&gt;二、vps配置Nginx和安装配置v2ray&lt;/p&gt;

&lt;p&gt;设置/etc/nginx/sites-enabled/default为：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
server {

        #index index.html index.htm index.nginx-debian.html;
        server_name example.com; # managed by Certbot


        location /test
        {
           proxy_redirect off;
           proxy_pass http://127.0.0.1:23456;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection &quot;upgrade&quot;;
           proxy_set_header Host $http_host;
        }



    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    ssl on;

}
&lt;/pre&gt;

&lt;p&gt;搞完以后，执行：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
service nginx restart
&lt;/pre&gt;

&lt;p&gt;安装v2ray就不说了，服务端配置文件如下：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
{
  &quot;inbounds&quot;: [
    {
      &quot;port&quot;: 123456,
      &quot;listen&quot;:&quot;127.0.0.1&quot;,
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;settings&quot;: {
        &quot;clients&quot;: [
          {
            &quot;id&quot;: &quot;你的id&quot;,
            &quot;alterId&quot;: 64
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;wsSettings&quot;: {
        &quot;path&quot;: &quot;/test&quot;
        }
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {}
    }
  ]
}
&lt;/pre&gt;

&lt;p&gt;搞完以后，执行：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
service v2ray restart
&lt;/pre&gt;

&lt;p&gt;三、在cloudflare上配置cdn
不提了，说多泪，主要是:&lt;/p&gt;

&lt;p&gt;1)在dns里面，将解析域名example.com指向被墙ip&lt;/p&gt;

&lt;p&gt;2)将ns server设置为cloudflare的ns&lt;/p&gt;

&lt;p&gt;3）在crypto菜单里面讲ssl设置为full，将“Always Use HTTPS”设置为ON！！！&lt;/p&gt;

&lt;p&gt;四、客户端配置v2ray&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
{
  #这个配置项是结合chinadns使用的
  &quot;inbound&quot;: {
    &quot;protocol&quot;: &quot;dokodemo-door&quot;,
    &quot;listen&quot;:&quot;0.0.0.0&quot;,
    &quot;port&quot;: 5353,
    &quot;settings&quot;: {
      &quot;address&quot;: &quot;8.8.8.8&quot;,
      &quot;port&quot;: 53,
      &quot;network&quot;: &quot;udp&quot;,
      &quot;timeout&quot;: 0,
      &quot;followRedirect&quot;: false
    }
  },
  &quot;inboundDetour&quot;: [
    {
       &quot;domainOverride&quot;: [
        &quot;http&quot;,
        &quot;tls&quot;
      ],
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
      &quot;port&quot;: 1080,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      
      &quot;settings&quot;: {
        &quot;network&quot;: &quot;tcp&quot;,
        &quot;timeout&quot;: 30,
        &quot;followRedirect&quot;: true
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;tag&quot;: &quot;proxy&quot;,
      &quot;settings&quot;: {
        &quot;vnext&quot;: [
          {
            &quot;address&quot;: &quot;你的网址&quot;,
            &quot;port&quot;: 443,
            &quot;users&quot;: [
              {
                &quot;id&quot;: &quot;你的key&quot;,
                &quot;alterId&quot;: 64
              }
            ]
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;security&quot;: &quot;tls&quot;,
        &quot;wsSettings&quot;: {
          &quot;path&quot;: &quot;/test&quot;
        }
      }
    }
  ],
  &quot;outboundDetour&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {},
      &quot;tag&quot;: &quot;direct&quot;
    }
  ],
  
  &quot;routing&quot;: {
    &quot;strategy&quot;: &quot;rules&quot;,
    &quot;settings&quot;: {
      &quot;domainStrategy&quot;: &quot;IPIfNonMatch&quot;,
      &quot;rules&quot;: [
          {
           &quot;type&quot;: &quot;field&quot;,
           &quot;ip&quot;: [
             &quot;8.8.8.8/32&quot;,
             &quot;8.8.4.4/32&quot;,
             &quot;91.108.56.0/22&quot;,
             &quot;91.108.4.0/22&quot;,
             &quot;109.239.140.0/24&quot;,
             &quot;149.154.164.0/22&quot;,
             &quot;91.108.56.0/23&quot;,
             &quot;67.198.55.0/24&quot;,
             &quot;149.154.168.0/22&quot;,
             &quot;149.154.172.0/22&quot;
           ],
           &quot;outboundTag&quot;: &quot;proxy&quot;
         },
         {
          &quot;type&quot;: &quot;field&quot;,
          &quot;domain&quot;: [
            &quot;googleapis.cn&quot;,
            &quot;google.cn&quot;,
            &quot;googleapis&quot;,
            &quot;google&quot;,
            &quot;domain:facebook.com&quot;,
            &quot;domain:github.com&quot;,
            &quot;domain:githubusercontent.com&quot;,
            &quot;youtube&quot;,
            &quot;twitter&quot;,
            &quot;instagram&quot;,
            &quot;gmail&quot;,
            &quot;v2ray.com&quot;,
            &quot;github.io&quot;,
            &quot;domain:twimg.com&quot;,
            &quot;domain:t.co&quot;
          ],
          &quot;outboundTag&quot;: &quot;proxy&quot;
        },
        {
           &quot;type&quot;: &quot;field&quot;,           
           &quot;domain&quot;: [
                &quot;ext:h2y.dat:gfw&quot;   #这个文件可以从https://github.com/ToutyRater/V2Ray-SiteDAT/tree/master/geofiles下载
           ],
           &quot;outboundTag&quot;: &quot;proxy&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;domain&quot;: [
            &quot;geosite:cn&quot;,
            &quot;domain:你的网址&quot;
          ],
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;ip&quot;: [
            &quot;0.0.0.0/8&quot;,
            &quot;10.0.0.0/8&quot;,
            &quot;100.64.0.0/10&quot;,
            &quot;127.0.0.0/8&quot;,
            &quot;169.254.0.0/16&quot;,
            &quot;172.16.0.0/12&quot;,
            &quot;192.0.0.0/24&quot;,
            &quot;192.0.2.0/24&quot;,
            &quot;192.168.0.0/16&quot;,
            &quot;198.18.0.0/15&quot;,
            &quot;198.51.100.0/24&quot;,
            &quot;203.0.113.0/24&quot;,
            &quot;::1/128&quot;,
            &quot;fc00::/7&quot;,
            &quot;fe80::/10&quot;,
            &quot;geoip:cn&quot;
          ],
          &quot;outboundTag&quot;: &quot;direct&quot;
        }
      ]
    }
  },
   &quot;transport&quot;: {
    &quot;tcpSettings&quot;: {
      &quot;connectionReuse&quot;: true
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;五、openwrt上配置防火墙&lt;/p&gt;

&lt;p&gt;参考上一篇文章
&lt;a href=&quot;https://wallsee.org/2019/06/09/v2raye59ca8openwrte4b88be79a84e5ae89e8a385e983a8e7bdb2.html&quot;&gt;配置&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;1).https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx&lt;/p&gt;

&lt;p&gt;2).https://zorz.cc/post/v2ray-cdn.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>v2ray在openwrt下的安装部署</title>
   <link href="https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2019/06/09/v2raye59ca8openwrte4b88be79a84e5ae89e8a385e983a8e7bdb2/"/>
   <updated>2019-06-09T09:44:57+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2019/06/09/v2raye59ca8openwrte4b88be79a84e5ae89e8a385e983a8e7bdb2</id>
   <content type="html">&lt;p&gt;从本月开始，ss扶墙的服务器全灭，最夸张的是新建一个灭一个，活不过2小时。不得不寻找新的解决方案，终于，花了几天时间搞定了。那就是迁移到v2ray。&lt;/p&gt;

&lt;p&gt;一、性能&lt;/p&gt;

&lt;p&gt;v2ray比ss强大很多，但是对路由的性能要求高很多，经过测试，发现如果要完整安装v2ray-core，路由本身至少需要256M ROM，32M RAM，这样的话，市面大多数跑得动ss路由都被淘汰了，目前mips路由，我只在MT7621AT上测试成功，使用的是联想newifi3 d2，但是想跑满带宽还是建议使用x86软路由，100M vmess跑满的话，i3 4代大约占用13~24%。&lt;/p&gt;

&lt;p&gt;二、安装&lt;/p&gt;

&lt;p&gt;1.服务器端&lt;/p&gt;

&lt;p&gt;1).首先是找一台墙外的vps，linux就行，推荐debian和ubuntu，根据v2ray官方文档，命令行执行：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
bash &amp;lt;(curl -L -s https://install.direct/go.sh)
&lt;/pre&gt;

&lt;p&gt;2).配置服务器端配置文件/etc/v2ray/config.json (v2ray安装完成后此文件就已经存在了，保留id，编辑其他部分)：&lt;/p&gt;

&lt;pre lang=&quot;vim&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
{

  &quot;inbound&quot;: {
    &quot;port&quot;: 11111,
    &quot;protocol&quot;: &quot;vmess&quot;,
    &quot;settings&quot;: {
      &quot;clients&quot;: [
        {
          &quot;id&quot;: &quot;你的ID&quot;,
          &quot;level&quot;: 1,
          &quot;alterId&quot;: 64
        }
      ],
      &quot;detour&quot;:{
        &quot;to&quot;:&quot;dynamicPort&quot;
      }
    },
    &quot;streamSettings&quot;:{
      &quot;network&quot;:&quot;kcp&quot;
    }
  },
  &quot;inboundDetour&quot;:[
    {
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;port&quot;: &quot;10000-50000&quot;,
      &quot;tag&quot;: &quot;dynamicPort&quot;,
      &quot;settings&quot;: {
        &quot;default&quot;: {
          &quot;level&quot;: 1,
          &quot;alterId&quot;: 64
        }
      },
      &quot;allocate&quot;: {
        &quot;strategy&quot;: &quot;random&quot;,
        &quot;concurrency&quot;: 4,
        &quot;refresh&quot;: 300
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;kcp&quot;
      }
    }
  ],
  &quot;outbound&quot;: {
    &quot;protocol&quot;: &quot;freedom&quot;,
    &quot;settings&quot;: {}
  },
  &quot;outboundDetour&quot;: [
    {
      &quot;protocol&quot;: &quot;blackhole&quot;,
      &quot;settings&quot;: {},
      &quot;tag&quot;: &quot;blocked&quot;
    }
  ],
 &quot;transport&quot;:{
      &quot;kcpSettings&quot;:{
         &quot;mtu&quot;:1350,
         &quot;tti&quot;:50,
         &quot;uplinkCapacity&quot;:100,
         &quot;downlinkCapacity&quot;:200,
         &quot;congestion&quot;:true,
         &quot;readBufferSize&quot;:2,
         &quot;writeBufferSize&quot;:2,
         &quot;header&quot;:{
            &quot;type&quot;:&quot;wechat-video&quot;
         }
      }
   }
}
&lt;/pre&gt;

&lt;p&gt;3).运行：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
service v2ray restart
&lt;/pre&gt;

&lt;p&gt;ps查看进程如果出现&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
/usr/bin/v2ray -config /etc/v2ray/config.json
&lt;/pre&gt;
&lt;p&gt;即成功了。&lt;/p&gt;

&lt;p&gt;2.本地路由安装&lt;/p&gt;

&lt;p&gt;1).校准时间&lt;/p&gt;

&lt;p&gt;由于v2ray dynamic port对时间要求很高，所以，首先是校准时间，可以在启动项里面添加&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
sleep 10
ntpd -q -n -d -p 1.openwrt.pool.ntp.org
ntpd -q -n -d -p  ntp1.aliyun.com
&lt;/pre&gt;

&lt;p&gt;计划任务里面添加&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
10 * * * * ntpd -q -n -d -p 1.openwrt.pool.ntp.org
10 * * * * ntpd -q -n -d -p  ntp1.aliyun.com
&lt;/pre&gt;

&lt;p&gt;2).安装v2ray-core, kuoruan 大神的github仓库里面有release的版本，可以直接去下载合适的架构，我这里下载的是：&lt;/p&gt;

&lt;p&gt;https://github.com/kuoruan/openwrt-v2ray/releases/download/v4.19.1-2/v2ray-core_4.19.1-2_x86_64.ipk&lt;/p&gt;

&lt;p&gt;尝试自己编译了一下，报错了没有成功，就用了现成的。&lt;/p&gt;

&lt;p&gt;ps:其实x86的openwrt装v2ray linux x64原版的也行，直接解压拷贝到openwrt某个目录下chmod就行了，这2个版本都要求装ca-certificates。&lt;/p&gt;

&lt;p&gt;opkg直接安装，建议先opkg update一下，如果有关联的package就一起装了。&lt;/p&gt;

&lt;p&gt;3)配置v2ray，可以放在/etc/config/v2ray.json&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
{

  &quot;outbound&quot;: {
    &quot;protocol&quot;: &quot;vmess&quot;,
    &quot;tag&quot;: &quot;proxy&quot;,
    &quot;settings&quot;: {
      &quot;vnext&quot;: [
        {
          &quot;address&quot;: &quot;VPS的ip地址&quot;,
          &quot;port&quot;: 11111,
          &quot;users&quot;: [
            {
              &quot;id&quot;: &quot;你的id&quot;,
              &quot;level&quot;: 1,
              &quot;alterId&quot;: 64
            }
          ]
        }
      ]
    },
    &quot;streamSettings&quot;: {
      &quot;network&quot;: &quot;kcp&quot;
    },
    &quot;mux&quot;: {
      #不建议打开，否则会断流
      &quot;enabled&quot;: false
    }
  },
  &quot;outboundDetour&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {},
      &quot;tag&quot;: &quot;direct&quot;
    }
  ],
  &quot;inbound&quot;: {
    &quot;protocol&quot;: &quot;dokodemo-door&quot;,
    &quot;listen&quot;:&quot;127.0.0.1&quot;,
    &quot;port&quot;: 5353,
    &quot;settings&quot;: {
      &quot;address&quot;: &quot;8.8.8.8&quot;,
      &quot;port&quot;: 53,
      &quot;network&quot;: &quot;udp&quot;,
      &quot;timeout&quot;: 0,
      &quot;followRedirect&quot;: false
    }
  },
  &quot;inboundDetour&quot;: [
    {
      #如果使用chinadns，这个参数可以不要
      &quot;sniffing&quot;: {
        &quot;enabled&quot;: true,
        &quot;destOverride&quot;: [&quot;http&quot;, &quot;tls&quot;]
      },
      &quot;protocol&quot;: &quot;dokodemo-door&quot;,
       &quot;listen&quot;:&quot;网关的lan ip例如192.168.1.1，如果不指定仅监听lan，会有安全性问题&quot;,
      &quot;port&quot;: 1060,
      &quot;settings&quot;: {
        &quot;network&quot;: &quot;tcp&quot;,
        &quot;timeout&quot;: 30,
        &quot;followRedirect&quot;: true
      }
    }
  ],
  &quot;dns&quot;: {
    &quot;servers&quot;: [
       &quot;localhost&quot;,
       &quot;8.8.8.8&quot;,
       &quot;1.1.1.1&quot;
    ]
  },
  &quot;routing&quot;: {
    &quot;strategy&quot;: &quot;rules&quot;,
    &quot;settings&quot;: {
      &quot;domainStrategy&quot;: &quot;IPIfNonMatch&quot;,
      &quot;rules&quot;: [
          {
           &quot;type&quot;: &quot;field&quot;,
           &quot;ip&quot;: [
             &quot;8.8.8.8/32&quot;,
             &quot;8.8.4.4/32&quot;,
             &quot;91.108.56.0/22&quot;,
             &quot;91.108.4.0/22&quot;,
             &quot;109.239.140.0/24&quot;,
             &quot;149.154.164.0/22&quot;,
             &quot;91.108.56.0/23&quot;,
             &quot;67.198.55.0/24&quot;,
             &quot;149.154.168.0/22&quot;,
             &quot;149.154.172.0/22&quot;
           ],
           &quot;outboundTag&quot;: &quot;proxy&quot;
         },
         {
          &quot;type&quot;: &quot;field&quot;,
          &quot;domain&quot;: [
            &quot;googleapis.cn&quot;,
    	    &quot;google.cn&quot;,
            &quot;googleapis&quot;,
            &quot;google&quot;,
            &quot;facebook&quot;,
            &quot;youtube&quot;,
            &quot;twitter&quot;,
            &quot;instagram&quot;,
            &quot;gmail&quot;,
            &quot;domain:twimg.com&quot;,
            &quot;domain:t.co&quot;
          ],
          &quot;outboundTag&quot;: &quot;proxy&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;domain&quot;: [
            &quot;geosite:cn&quot;
          ],
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;port&quot;: &quot;1-21&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;port&quot;: &quot;54-79&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;port&quot;: &quot;81-442&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;port&quot;: &quot;444-3999&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;port&quot;: &quot;4001-65535&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;domain&quot;: [
            &quot;vultr.com&quot;
          ],
          &quot;type&quot;: &quot;field&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;chinasites&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;field&quot;,
          &quot;ip&quot;: [
            &quot;0.0.0.0/8&quot;,
            &quot;10.0.0.0/8&quot;,
            &quot;100.64.0.0/10&quot;,
            &quot;127.0.0.0/8&quot;,
            &quot;169.254.0.0/16&quot;,
            &quot;172.16.0.0/12&quot;,
            &quot;192.0.0.0/24&quot;,
            &quot;192.0.2.0/24&quot;,
            &quot;192.168.0.0/16&quot;,
            &quot;198.18.0.0/15&quot;,
            &quot;198.51.100.0/24&quot;,
            &quot;203.0.113.0/24&quot;,
            &quot;::1/128&quot;,
            &quot;fc00::/7&quot;,
            &quot;fe80::/10&quot;
          ],
          &quot;outboundTag&quot;: &quot;direct&quot;
        },
        {
          &quot;type&quot;: &quot;chinaip&quot;,
          &quot;outboundTag&quot;: &quot;direct&quot;
        }
      ]
    }
  },
  &quot;transport&quot;: {
     &quot;tcpSettings&quot;: {
      &quot;connectionReuse&quot;: true
    },
    &quot;kcpSettings&quot;: {
      &quot;mtu&quot;: 1350,
      &quot;tti&quot;: 50,
      &quot;uplinkCapacity&quot;: 100,
      &quot;downlinkCapacity&quot;: 200,
      &quot;congestion&quot;: true,
      &quot;readBufferSize&quot;: 2,
      &quot;writeBufferSize&quot;: 2,
      &quot;header&quot;: {
        &quot;type&quot;: &quot;wechat-video&quot;
      }
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;4)添加文件/etc/init.d/v2ray,填写如下内容：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 Ian Li &amp;lt;OpenSource@ianli.xyz&amp;gt;
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90

USE_PROCD=1
LimitNOFILE=1048576
LimitNPROC=512

start_service() {
        mkdir /var/log/v2ray &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
        ulimit -n 99999
        procd_open_instance
        procd_set_param respawn
        procd_set_param command /usr/bin/v2ray -config /etc/config/v2ray.json
        procd_set_param file /etc/config/v2ray.json
        procd_set_param stdout 1
        procd_set_param stderr 1
        procd_set_param pidfile /var/run/v2ray.pid
        procd_close_instance
}

&lt;/pre&gt;

&lt;p&gt;5)添加服务，开机自动运行，并运行：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
chmod +x /etc/init.d/v2ray
/etc/init.d/v2ray enable
service v2ray start
&lt;/pre&gt;

&lt;p&gt;ps查看进程，如果存在，即正常启动。&lt;/p&gt;

&lt;p&gt;6)两种模式，任选一种：&lt;/p&gt;

&lt;p&gt;a) 境外全局模式，所有境外网站均挂代理&lt;/p&gt;

&lt;p&gt;添加防火墙规则(直接添加到/etc/firewall.user 或者luci界面 网络-&amp;gt;防火墙 编辑)：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
iptables -t nat -N V2RAY
iptables -t nat -A V2RAY -d VPS地址 -j RETURN
iptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN
iptables -t nat -A V2RAY -d 172.16.0.0/12 -j RETURN
iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN
iptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN
iptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN
iptables -t nat -A V2RAY -s 内网ip段，例如192.168.1.0/24 -p tcp -j REDIRECT --to-ports 1060
iptables -t nat -A PREROUTING -p tcp -j V2RAY
iptables -t nat -A OUTPUT -p tcp -j V2RAY
&lt;/pre&gt;

&lt;p&gt;b) gwflist模式，仅对gfwlist挂代理，此方法可以提升路由国内网站访问性能（建议删除v2ray配置文件中的 “routing”路由部分）还能避免p2p下载时影响路由性能&lt;/p&gt;

&lt;p&gt;先安装dnsmasq_full&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
opkg update
opkg install dnsmasq_full
opkg remove dnsmasq
&lt;/pre&gt;
&lt;p&gt;添加防火墙规则(直接添加到/etc/firewall.user 或者luci界面 网络-&amp;gt;防火墙 编辑)：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
ipset -N gfwlist iphash
iptables -t nat -A PREROUTING -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1060
iptables -t nat -A OUTPUT -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-port 1060
#add telegram server
ipset add gfwlist 93.119.240.0/24
ipset add gfwlist 93.119.241.0/24
ipset add gfwlist 93.119.242.0/24
ipset add gfwlist 93.119.243.0/24
ipset add gfwlist 93.119.244.0/24
ipset add gfwlist 93.119.245.0/24
ipset add gfwlist 93.119.246.0/24
ipset add gfwlist 93.119.247.0/24
ipset add gfwlist 93.119.248.0/24
ipset add gfwlist 93.119.249.0/24
ipset add gfwlist 93.119.250.0/24
ipset add gfwlist 93.119.251.0/24
ipset add gfwlist 93.119.252.0/24
ipset add gfwlist 93.119.253.0/24
ipset add gfwlist 93.119.254.0/24
ipset add gfwlist 93.119.255.0/24
ipset add gfwlist 149.154.172.0/22
ipset add gfwlist 91.108.12.0/22
ipset add gfwlist 149.154.160.0/20
ipset add gfwlist 149.154.164.0/22
ipset add gfwlist 91.108.4.0/22
ipset add gfwlist 91.108.56.0/22
ipset add gfwlist 91.108.8.0/22
&lt;/pre&gt;
&lt;p&gt;编辑/etc/dnsmasq.conf，github上有很多脚本自动将gfwlist转换为dnsmasq.conf，也可以下个现成的，例如：&lt;/p&gt;

&lt;p&gt;https://cokebar.github.io/gfwlist2dnsmasq/dnsmasq_gfwlist_ipset.conf&lt;/p&gt;

&lt;p&gt;其中部分内容（规则）为：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
server=/030buy.com/127.0.0.1#5353
ipset=/030buy.com/gfwlist
server=/0rz.tw/127.0.0.1#5353
ipset=/0rz.tw/gfwlist
……
&lt;/pre&gt;

&lt;p&gt;7)配置/etc/dnsmasq.conf，防止dns查询泄露：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
server=/google.com/127.0.0.1#5353
server=/google.com.hk/127.0.0.1#5353
server=/google.com.tw/127.0.0.1#5353
server=/google.com.sg/127.0.0.1#5353
server=/google.co.jp/127.0.0.1#5353
server=/google.co.kr/127.0.0.1#5353
server=/freeweibo.com/127.0.0.1#5353
server=/twitter.com/127.0.0.1#5353
server=/facebook.com/127.0.0.1#5353
server=/instagram.com/127.0.0.1#5353
&lt;/pre&gt;

&lt;p&gt;运行：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
/etc/init.d/dnsmasq restart
&lt;/pre&gt;

&lt;p&gt;8）安装和配置chinadns&lt;/p&gt;

&lt;p&gt;虽然v2ray也有dns配置，但：&lt;/p&gt;

&lt;p&gt;a.不支持固定端口的dns国内外分流（domainoverride或sniffing确实可以防止污染，但是偶尔会有reset的问题）&lt;/p&gt;

&lt;p&gt;b.ip地址库过于庞大&lt;/p&gt;

&lt;p&gt;c.被墙网站能上但ping不通（对于dns污染的网址，子网拿不到真实ip）&lt;/p&gt;

&lt;p&gt;因此还是使用chinadns。&lt;/p&gt;

&lt;p&gt;首先安装chinadns (直接去github下载对应安装包)：&lt;/p&gt;
&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
opkg update
opkg install chinadns
&lt;/pre&gt;

&lt;p&gt;其次登陆luci界面：&lt;/p&gt;

&lt;p&gt;a.服务-&amp;gt;chinadns设置&lt;/p&gt;

&lt;p&gt;‘启用压缩指针’勾打上，&lt;/p&gt;

&lt;p&gt;‘启用双向过滤’勾去掉，&lt;/p&gt;

&lt;p&gt;‘上游服务器’改成114.114.114.114,127.0.0.1:5353，&lt;/p&gt;

&lt;p&gt;注：5353也可以改成dns forward监听端口，这样走tcp查dns&lt;/p&gt;

&lt;p&gt;chinadns的监听端口为5454，打勾启用&lt;/p&gt;

&lt;p&gt;监听地址为127.0.0.1&lt;/p&gt;

&lt;p&gt;b.网络-&amp;gt;dhcp/dns设置&lt;/p&gt;

&lt;p&gt;基本设置-&amp;gt;dns转发 里面设置为&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
127.0.0.1#5454
127.0.0.1#5454
127.0.0.1#5454
127.0.0.1#5454
&lt;/pre&gt;

&lt;p&gt;填4个是为了保证稳定性，否则经常会出现解析失败导致网页无法打开&lt;/p&gt;

&lt;p&gt;c.基本设置-&amp;gt;host和解析文件&lt;/p&gt;

&lt;p&gt;忽略解析文件 打钩&lt;/p&gt;

&lt;p&gt;忽略HOSTS文件 打钩&lt;/p&gt;

&lt;p&gt;9)重启防火墙/路由即可&lt;/p&gt;

&lt;p&gt;注意：如果之前配置过ss+dnsforwarder+chinadns，建议重新刷机或者删除所有配置后重新配置，否则会有冲突。
另外建议在/etc/sysctl.conf增加：&lt;/p&gt;

&lt;pre lang=&quot;bash&quot; line=&quot;0&quot; colla=&quot;+&quot;&gt;
fs.file-max=90000
&lt;/pre&gt;

&lt;p&gt;之前貌似运行时间一久，会出现 too many open files 的提示，用上述办法（包括/etc/init.d/v2ray 的参数/命令设置）后没有出现此类问题。&lt;/p&gt;

&lt;p&gt;此外国内部分运营商对kcp有qos，症状是每隔一段时间，会出现断流，也就是十几或几十分钟后，间歇出现不能上外网的情况。。。这一点已经验证。解决方案是——用v2ray负载均衡,但不能完全解决。。。换运营商是王道。。。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;1).https://blog.dreamtobe.cn/r7800-openwrt-v2ray/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在Openwrt/Lede路由上实现基于Name.com V4版本API的快速更新的DDNS</title>
   <link href="https://jibenfa.github.io/openwrt/2018/02/28/e59ca8openwrt-ledee8b7afe794b1e4b88ae5ae9ee78eb0e59fbae4ba8ename-com-v4e78988e69cacapie79a84ddns/"/>
   <updated>2018-02-28T22:21:35+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2018/02/28/e59ca8openwrt-ledee8b7afe794b1e4b88ae5ae9ee78eb0e59fbae4ba8ename-com-v4e78988e69cacapie79a84ddns</id>
   <content type="html">&lt;p&gt;之前一直用花生壳的免费DDNS，但是最近一周不知道为啥，服务老是抽风，dns更新速度明显下降，甚至达到1-2天。于是研究了一下，发现name.com最近发布了v4版本的api，看了文档以后，果断写了个脚本，一旦ip变更，新dns可以马上更新，消耗时间无限接近0。。。于是ddns更新时间只基于计划任务的间隔时间了。。。&lt;br /&gt;
使用此脚本的前提：&lt;br /&gt;
1.域名必须是由name.com购买的，并且生成一个生产的Token。&lt;br /&gt;
2.登陆账户必须没有开启二次验证，否则api会提示错误：Accout has Namesafe enabled. （注意这里account拼写还是错的。。已发ticket给name.com）。&lt;br /&gt;
3.路由上需要安装curl和ca-certificates和ca-bundle,以便解析https。&lt;br /&gt;
4.首次需要手动添加一次域名，以便获取ID号码，例如为www.examle.com添加第一个dns记录：&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;curl -u &apos;YOUR_USER_NAME:YOUR_API_TOKEN&apos; &apos;https://api.name.com/v4/domains/example.com/records&apos; -X POST --data &apos;{&quot;host&quot;:&quot;www&quot;,&quot;type&quot;:&quot;A&quot;,&quot;answer&quot;:&quot;YOUR_IP&quot;,&quot;ttl&quot;:300}&apos;&lt;/pre&gt;

&lt;p&gt;从返回的json里面记录下id，json格式为：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;{
    &quot;id&quot;: 12345,
    &quot;domainName&quot;: &quot;example.org&quot;,
    &quot;host&quot;: &quot;www&quot;,
    &quot;fqdn&quot;: &quot;www.example.org&quot;,
    &quot;type&quot;: &quot;A&quot;,
    &quot;answer&quot;: &quot;10.0.0.1&quot;,
    &quot;ttl&quot;: 300
}&lt;/pre&gt;

&lt;p&gt;此id要写入脚本。&lt;/p&gt;

&lt;p&gt;后续就可以通过如下脚本更新dns了。&lt;br /&gt;
脚本如下：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;#!/bin/sh

USER=&quot;YOUR_USER_NAME&quot;
TOKEN=&quot;YOUR_API_TOKEN&quot;
ID=&quot;YOUR_URL_ID&quot;
HOST=&quot;www&quot;
DOMAIN=&quot;example.com&quot;
URL=${HOST}.${DOMAIN}
IP=`ping ${URL} -c 1 |awk &apos;NR==2 {print $4}&apos; |awk -F &apos;:&apos; &apos;{print $1}&apos;`
#如果安装了dig也可以这样
#IP=`dig ${DOMAIN} @114.114.114.114 | awk -F &quot;[ ]+&quot; &apos;/IN/{print $1}&apos; | awk &apos;NR==2 {print $5}&apos;`
echo &quot;Ip of ${URL} is ${IP}&quot;
LIP=`ifconfig pppoe-wan|awk -F &quot;[: ]+&quot; &apos;/inet addr/{print $4}&apos;`
echo &quot;Local Ip is ---${LIP}---&quot;

if [ &quot;${LIP}&quot; = &quot;${IP}&quot; ]; then
   exit
fi

echo &quot;start ddns refresh&quot;
if [ x&quot;${LIP}&quot; != x ]; then
   curl -u &apos;&apos;&quot;&quot;${USER}&quot;&quot;&apos;:&apos;&quot;&quot;${TOKEN}&quot;&quot;&apos;&apos; &apos;https://api.name.com/v4/domains/&apos;&quot;&quot;${DOMAIN}&quot;&quot;&apos;/records/&apos;&quot;&quot;${ID}&quot;&quot;&apos;&apos; -X PUT --data &apos;{&quot;host&quot;:&quot;&apos;&quot;&quot;${HOST}&quot;&quot;&apos;&quot;,&quot;type&quot;:&quot;A&quot;,&quot;answer&quot;:&quot;&apos;&quot;&quot;${LIP}&quot;&quot;&apos;&quot;,&quot;ttl&quot;:300}&apos;
   echo ${LIP} &amp;gt; /tmp/ddnsResult
fi&lt;/pre&gt;

&lt;p&gt;参考资料：&lt;br /&gt;
1.https://www.name.com/api-docs/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用LEDE/OPENWRT 路由器自动发送邮件</title>
   <link href="https://jibenfa.github.io/openwrt/2018/01/30/e4bdbfe794a8ledeopenwrt-e8b7afe794b1e599a8e887aae58aa8e58f91e98081e982aee4bbb6/"/>
   <updated>2018-01-30T22:32:10+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2018/01/30/e4bdbfe794a8ledeopenwrt-e8b7afe794b1e599a8e887aae58aa8e58f91e98081e982aee4bbb6</id>
   <content type="html">&lt;p&gt;今天研究实现了手动或者定时自动通过LEDE/openwrt路由对外发送邮件的功能。&lt;br /&gt;
1.安装软件包。&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;opkg update
opkg install mutt ssmtp ca-certificates ca-bundle&lt;/pre&gt;

&lt;p&gt;2.配置ssmtp&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;vi /etc/ssmtp/ssmtp.conf
&lt;/pre&gt;

&lt;p&gt;内容为：&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;#
# /etc/ssmtp.conf -- a config file for sSMTP sendmail.
#

# The person who gets all mail for userids &amp;lt; 1000
# Make this empty to disable rewriting.
root=MY@TEST.com

# The place where the mail goes. The actual machine name is required
# no MX records are consulted. Commonly mailhosts are named mail.domain.com
# The example will fit if you are in domain.com and your mailhub is so named.
# 不同邮箱供应商的配置不同，需查阅供应商手册
mailhub=smtp.TEST.com:465

# Example for SMTP port number 2525
# mailhub=mail.your.domain:2525
# Example for SMTP port number 25 (Standard/RFC)
# mailhub=mail.your.domain
# Example for SSL encrypted connection
# mailhub=mail.your.domain:465

# Where will the mail seem to come from?
rewriteDomain=TEST.com

# The full hostname
hostname=TEST.com

# Set this to never rewrite the &quot;From:&quot; line (unless not given) and to
# use that address in the &quot;from line&quot; of the envelope.
FromLineOverride=YES

# Use SSL/TLS to send secure messages to server.
UseTLS=YES

# Use SSL/TLS certificate to authenticate against smtp host.
#UseTLSCert=YES

# Use this RSA certificate.
#TLSCert=/etc/ssl/certs/ssmtp.pem

# Get enhanced (*really* enhanced) debugging information in the logs
# If you want to have debugging of the config file parsing, move this option
# to the top of the config file and uncomment
#Debug=YES
&lt;/pre&gt;

&lt;p&gt;然后：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;vi /etc/ssmtp/revaliases&lt;/pre&gt;

&lt;p&gt;内容为：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;# sSMTP aliases
#
# Format:       local_account:outgoing_address:mailhub
#
# Example: root:your_login@your.domain:mailhub.your.domain[:port]
# where [:port] is an optional port number that defaults to 25.
root:MY@TEST.com:smtp.TEST.com:465
&lt;/pre&gt;

&lt;p&gt;3.配置mutt&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;vi ~/.muttrc&lt;/pre&gt;

&lt;p&gt;内容为：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;mailboxes /tmp/mail
set sendmail=&quot;ssmtp -v -auMY@TEST.com -apMYPASSWORD&quot;
set from=&quot;MY@TEST.com&quot;
# Mail folder setup.
set folder=/tmp/mail
set mbox_type=mbox
set spoolfile=+inbox
set mbox=+received
set postponed=+postponed
set record=+sent&lt;/pre&gt;

&lt;p&gt;4.编写脚本sendmail.sh&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;vi ./sendmail.sh
chmod +x ./sendmail.sh&lt;/pre&gt;

&lt;p&gt;内容为：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;mkdir /tmp/mail
cat /tmp/sysinfo/model | mutt  -s &quot;Mail from Router of Coffeecat&quot;  receiver@TEST.com -a &apos;attachment.txt&apos;&lt;/pre&gt;

&lt;p&gt;然后运行：&lt;br /&gt;
./sendmail.sh&lt;br /&gt;
就可以看到结果了（如果是从vip.qq.com发送的话）：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;[&amp;lt;-] 220 smtp.qq.com Esmtp QQ Mail Server
[-&amp;gt;] EHLO vip.qq.com
[&amp;lt;-] 250 8BITMIME
[-&amp;gt;] AUTH LOGIN
[&amp;lt;-] 334 XXYlcm5hbDF6
[-&amp;gt;] Z2FyACDDbTT4dBB2aXAucWSuY29t
[&amp;lt;-] 334 REWzc3dverH6
[&amp;lt;-] 235 Authentication successful
[-&amp;gt;] MAIL FROM:&amp;lt;MY@TEST.com&amp;gt;
[&amp;lt;-] 250 Ok
[-&amp;gt;] RCPT TO:&amp;lt;reciever@TEST.com&amp;gt;
[&amp;lt;-] 250 Ok
[-&amp;gt;] DATA
[&amp;lt;-] 354 End data with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
[-&amp;gt;] Received: by vip.qq.com (sSMTP sendmail emulation); Tue, 30 Jan 2018 22:25:31 +0800
[-&amp;gt;] Date: Tue, 30 Jan 2018 22:25:31 +0800
[-&amp;gt;] From: root &amp;lt;MY@TEST.com&amp;gt;
[-&amp;gt;] To: reciever@TEST.com
[-&amp;gt;] Subject: Mail from Router of Coffeecat
[-&amp;gt;] Message-ID: &amp;lt;20180130142531.GA1968@Exciting.lan&amp;gt;
[-&amp;gt;] MIME-Version: 1.0
[-&amp;gt;] Content-Type: multipart/mixed; boundary=&quot;Nq2Wo0NMKNjxTN9z&quot;
[-&amp;gt;] Content-Disposition: inline
[-&amp;gt;] User-Agent: Mutt/1.9.2 (2017-12-15)
[-&amp;gt;]
[-&amp;gt;]
[-&amp;gt;] --Nq2Wo0NMKNjxTN9z
[-&amp;gt;] Content-Type: text/plain; charset=us-ascii
[-&amp;gt;] Content-Disposition: inline
[-&amp;gt;]
[-&amp;gt;] HiWiFi HC5962
[-&amp;gt;]
[-&amp;gt;] --Nq2Wo0NMKNjxTN9z
[-&amp;gt;] Content-Type: text/plain; charset=us-ascii
[-&amp;gt;] Content-Disposition: attachment; filename=&quot;maclist.txt&quot;
[-&amp;gt;] .......
[-&amp;gt;]
[-&amp;gt;] --Nq2Wo0NMKNjxTN9z--
[-&amp;gt;] .
[&amp;lt;-] 250 Ok: queued as
[-&amp;gt;] QUIT
[&amp;lt;-] 221 Bye&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>开关openwrt/lede路由上的usb设备电源</title>
   <link href="https://jibenfa.github.io/openwrt/2017/10/11/e5bc80e585b3openwrtledee8b7afe794b1e4b88ae79a84usbe8aebee5a487e794b5e6ba90/"/>
   <updated>2017-10-11T22:25:43+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2017/10/11/e5bc80e585b3openwrtledee8b7afe794b1e4b88ae79a84usbe8aebee5a487e794b5e6ba90</id>
   <content type="html">&lt;p&gt;最近搞了个华为的usb无线网卡E8372插在lede路由上，但是想实现程序控制其供电，查阅资料后发现可以这样实现：&lt;br /&gt;
首先：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;ls /sys/class/gpio/&lt;/pre&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;export      gpiochip32  unexport    usb3power
gpiochip0   gpiochip64  usb2power&lt;/pre&gt;

&lt;p&gt;由于网卡是插在usb3的口上。&lt;br /&gt;
于是：&lt;br /&gt;
要打开网卡电源：&lt;br /&gt;
echo 1 &amp;gt; /sys/class/gpio/usb3power/value&lt;br /&gt;
要关闭网卡电源：&lt;br /&gt;
echo 0 &amp;gt; /sys/class/gpio/usb3power/value&lt;/p&gt;

&lt;p&gt;上述方法可以利用网卡断电重启来解决因开机时网卡启动慢于路由启动，导致eth1 interface不能正常up的问题。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;br /&gt;
https://wiki.openwrt.org/doc/howto/usb.overview&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>LEDE/Openwrt 挂载USB无线网卡当AP</title>
   <link href="https://jibenfa.github.io/openwrt/2017/08/20/ledeopenwrt-e68c82e8bdbdusbe697a0e7babfe7bd91e58da1e5bd93ap/"/>
   <updated>2017-08-20T12:42:57+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2017/08/20/ledeopenwrt-e68c82e8bdbdusbe697a0e7babfe7bd91e58da1e5bd93ap</id>
   <content type="html">&lt;p&gt;由于mt7621方案中mt7603e的2.4G lede驱动非常不稳定，导致我买的newifi d1、zbt wg3526、极路由4（HC5962）刷机后的2.4G基本都成了摆设。没办法只能通过挂载USB无线网卡当AP。&lt;br /&gt;
测试的USB网卡有：&lt;br /&gt;
X东购买tplink tl-wn725n v2.0 rtl8188eu （0x0bda:0x8179）安装驱动后直接无法启动路由器。。。跟作者发了邮件，回复说不支持。&lt;br /&gt;
X宝购买RT3070 杂牌网卡，安装驱动后直接无法开启ap模式，只能使用client模式。。。网上查询据说是最新的几版的驱动有问题，op老版本据说没问题，未测试。&lt;br /&gt;
X东购买磊科（netcore）NW362，rtl8192cu，安装驱动后完美ap模式。&lt;br /&gt;
以前买的tplink tl-wn821n v2.0，ar9170，安装kmod-carl9170驱动后，完美ap模式。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>直插SIM卡全网五模便携LEDE路由（5200mAh）</title>
   <link href="https://jibenfa.github.io/openwrt/2017/03/19/e79bb4e68f92sime58da1e585a8e7bd91e4ba94e6a8a1e4bebfe690baledee8b7afe794b1efbc885200mahefbc89/"/>
   <updated>2017-03-19T11:42:02+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2017/03/19/e79bb4e68f92sime58da1e585a8e7bd91e4ba94e6a8a1e4bebfe690baledee8b7afe794b1efbc885200mahefbc89</id>
   <content type="html">&lt;p&gt;之前买了个ZTE Q7便携路由，也可以刷op，但是不能直接插sim卡，携带不是很方便，最近在网上逛了逛，发现了一个神器，配置为 mt7620a ROM 16M/RAM 128M 5200mAh，花了一周时间，适配了LEDE 17.07.0 正式版本系统，目前实现了几个功能：&lt;br /&gt;
1.直插sim卡上网，目前测试了移动3g和联通3g，使用的是上海移远EC20-C 4g mini pcie模块（注意经研究该模块有很多个批次，需要芯片为高通MDM9215才行，pid 05c6 vid 9215），参数为：&lt;br /&gt;
EC20-C&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;FDD LTE: B1/B3/B8
TDD LTE: B38/B39/B40/B41
TDSCDMA: B34/B39
UMTS: B1/B8
GSM: 900/1800MHz&lt;/pre&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;https://jibenfa.github.io/uploads/2017/03/IMG_20170319_104102.jpg&quot; width=&quot;1000&quot; height=&quot;618&quot; alt=&quot;AltText&quot; /&gt;
 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;参数是支持（移动4g 3g 2g，联通4g 3g 2g，电信4g）&lt;br /&gt;
原厂OP可以支持EC20-CE（高通MDM9215，pid 05c6 vid 9215，注意此CE支持电信3g）但不支持EC20-CE（高通MDM9x07，pid 2c7c vid 0125）&lt;br /&gt;
EC20-CE&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;FDD LTE: B1/B3 
TDD LTE: B38/B39/B40/B41 
TDSCDMA: B34/B39 
WCDMA: B1 
CDMA2000 1x/EVDO: BC0 
GSM: 900/1800MHz &lt;/pre&gt;

&lt;p&gt;目前LEDE 17.07是4.4的kernel，开源驱动仅支持EC20-C 4g模块（芯片为高通MDM9215，pid 05c6 vid 9215），查阅linux kernel qmi_wwan.c源代码，4.10可以支持EC20-CE（高通MDM9x07，pid 2c7c vid 0125），但目前LEDE还不行。&lt;br /&gt;
2.直插SD卡，但是根据原厂说明，usb仅限对外充电，不支持外挂U盘&lt;br /&gt;
3.LEDE/OPENWRT的其他功能，例如ss等&lt;/p&gt;

&lt;p&gt;适配采用修改ZTE-Q7代码来实现（led在系统启动的时候是不亮的，启动成功后显示蓝色，囧）：&lt;br /&gt;
1.修改target/linux/ramips/base-files/etc/board.d/01_leds&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;zte-q7)
	ucidef_set_led_default &quot;power&quot; &quot;power&quot; &quot;$board:green:sys&quot; &quot;0&quot;
	;;&lt;/pre&gt;

&lt;p&gt;2.修改target/linux/ramips/base-files/etc/diag.sh&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;zte-q7)
		status_led=&quot;$board:green:wifi&quot;
		;;&lt;/pre&gt;

&lt;p&gt;3.修改target/linux/ramips/dts/ZTE-Q7.dts&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;/dts-v1/;

#include &quot;mt7620a.dtsi&quot;

#include &amp;lt;dt-bindings/input/input.h&amp;gt;

/ {
	compatible = &quot;ZTE-Q7&quot;, &quot;ralink,mt7620a-soc&quot;;
	model = &quot;ZTE Q7&quot;;

	gpio-leds {
		compatible = &quot;gpio-leds&quot;;

		usb {
			label = &quot;zte-q7:usb&quot;;
			gpios = &amp;lt;&amp;amp;gpio0 11 1&amp;gt;;
		};
		sys {
			label = &quot;zte-q7:sys&quot;;
			gpios = &amp;lt;&amp;amp;gpio1 14 1&amp;gt;;
		};
		wlan {
			label = &quot;zte-q7:wlan&quot;;
			gpios = &amp;lt;&amp;amp;gpio3 0 1&amp;gt;;
		};
		wps {
			label = &quot;zte-q7:wps&quot;;
			gpios = &amp;lt;&amp;amp;gpio1 15 0&amp;gt;;
		};
	};

	gpio-keys-polled {
		compatible = &quot;gpio-keys-polled&quot;;
		#address-cells = &amp;lt;1&amp;gt;;
		#size-cells = &amp;lt;0&amp;gt;;
		poll-interval = &amp;lt;20&amp;gt;;

		reset {
			label = &quot;reset&quot;;
			gpios = &amp;lt;&amp;amp;gpio0 1 0&amp;gt;;
			linux,code = &amp;lt;0x198&amp;gt;;
		};
	};
};

&amp;amp;gpio0 {
	status = &quot;okay&quot;;
};

&amp;amp;gpio1 {
	status = &quot;okay&quot;;
};

&amp;amp;gpio3 {
	status = &quot;okay&quot;;
};

&amp;amp;spi0 {
	status = &quot;okay&quot;;

	en25q128@0 {
		#address-cells = &amp;lt;1&amp;gt;;
		#size-cells = &amp;lt;1&amp;gt;;
		compatible = &quot;w25q128&quot;;
		reg = &amp;lt;0&amp;gt;;
		linux,modalias = &quot;m25p80&quot;;
		spi-max-frequency = &amp;lt;10000000&amp;gt;;

		partition@0 {
			label = &quot;u-boot&quot;;
			reg = &amp;lt;0x0 0x30000&amp;gt;;
			read-only;
		};

		partition@30000 {
			label = &quot;u-boot-env&quot;;
			reg = &amp;lt;0x30000 0x10000&amp;gt;;
			read-only;
		};

		factory: partition@40000 {
			label = &quot;factory&quot;;
			reg = &amp;lt;0x40000 0x10000&amp;gt;;
			read-only;
		};

		partition@50000 {
			label = &quot;firmware&quot;;
			reg = &amp;lt;0x50000 0xfb0000&amp;gt;;
		};
	};
};

&amp;amp;pinctrl {
	state_default: pinctrl0 {
		gpio {
				ralink,group =&quot;i2c&quot;, &quot;uartf&quot;, &quot;wled&quot;, &quot;spi refclk&quot;;
				ralink,function = &quot;gpio&quot;;
			};
                        pa {
                                ralink,group = &quot;pa&quot;;
                                ralink,function = &quot;pa&quot;;
                        };
	};
};

&amp;amp;ethernet {
	pinctrl-names = &quot;default&quot;;
	pinctrl-0 = &amp;lt;&amp;amp;ephy_pins&amp;gt;;
	mtd-mac-address = &amp;lt;&amp;amp;factory 0x4&amp;gt;;
	mediatek,portmap = &quot;wllll&quot;;
};

&amp;amp;wmac {
	ralink,mtd-eeprom = &amp;lt;&amp;amp;factory 0&amp;gt;;
};

&amp;amp;sdhci {
	status = &quot;okay&quot;;
};

&amp;amp;ehci {
	status = &quot;okay&quot;;
};

&amp;amp;ohci {
	status = &quot;okay&quot;;
};

&amp;amp;pcie {
	status = &quot;okay&quot;;

	compatible = &quot;ralink,mt7620a-pci&quot;;
		reg = &amp;lt;0x10140000 0x100
			0x10142000 0x100&amp;gt;;

		resets = &amp;lt;&amp;amp;rstctrl 26&amp;gt;;
		reset-names = &quot;pcie0&quot;;

		interrupt-parent = &amp;lt;&amp;amp;cpuintc&amp;gt;;
		interrupts = &amp;lt;4&amp;gt;;
};


&lt;/pre&gt;

&lt;p&gt;最后编译的时候，选择&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;git clone https://git.lede-project.org/source.git
git fetch --tags
git tag -l
git checkout v17.01.0&lt;/pre&gt;

&lt;p&gt;参考：&lt;br /&gt;
1.http://lists.infradead.org/pipermail/lede-commits/2016-September/000876.html&lt;br /&gt;
2.https://lists.openwrt.org/pipermail/openwrt-devel/2015-March/032268.html&lt;br /&gt;
3.http://lxr.free-electrons.com/source/drivers/net/usb/qmi_wwan.c&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>利用Openwrt路由部署Openvpn进行两地组网</title>
   <link href="https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2017/03/07/e588a9e794a8openwrte8b7afe794b1e983a8e7bdb2openvpne8bf9be8a18ce4b8a4e59cb0e7bb84e7bd91/"/>
   <updated>2017-03-07T08:42:43+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/2017/03/07/e588a9e794a8openwrte8b7afe794b1e983a8e7bdb2openvpne8bf9be8a18ce4b8a4e59cb0e7bb84e7bd91</id>
   <content type="html">&lt;p&gt;最近实践了一下利用Openwrt路由部署Openvpn进行两地组网，目标是实现两个局域网互相访问。&lt;br /&gt;
配置：&lt;br /&gt;
1.Openvpn服务端（内部局域网段172.24.1.0/24）：&lt;br /&gt;
首先/etc/config/network配置加一个interface：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;config interface &apos;vpn1&apos;
    option proto &apos;none&apos;
    option ifname &apos;tun1&apos;&lt;/pre&gt;

&lt;p&gt;/etc/config/openvpn文件增加内容：&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt; 
config openvpn &apos;tun_router&apos;
        option port &apos;3377&apos;
        option proto &apos;tcp&apos;
        option dev &apos;tun1&apos;
        option ca &apos;/etc/openvpn/ca.crt&apos;
        option cert &apos;/etc/openvpn/server.crt&apos;
        option key &apos;/etc/openvpn/server.key&apos;
        option dh &apos;/etc/openvpn/dh2048.pem&apos;
        option server &apos;10.0.1.0 255.255.255.0&apos;
        option client_config_dir &apos;/etc/openvpn/ccd&apos;
        option ccd_exclusive &apos;1&apos;
        option ifconfig_pool_persist &apos;/tmp/ipp3.txt&apos;
        option client_to_client &apos;1&apos;
        option keepalive &apos;10 120&apos;
        option compress &apos;lzo&apos;
        option persist_key &apos;1&apos;
        option persist_tun &apos;1&apos;
        option status &apos;/tmp/openvpn-status3.log&apos;
        option verb &apos;3&apos;
        option enabled &apos;1&apos;
        option topology &apos;subnet&apos;
        list push &apos;route 172.24.1.0 255.255.255.0&apos;
        list route &apos;172.24.8.0 255.255.255.0&apos;

&lt;/pre&gt;

&lt;p&gt;/etc/openvpn/ccd文件夹内增加一个文件，文件名为客户端证书的common name，例如tbjj，内容为：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;ifconfig-push &quot;10.0.1.6 255.255.255.0&quot;
iroute 172.24.8.0 255.255.255.0&lt;/pre&gt;

&lt;p&gt;然后在防火墙自定义规则里面添加：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;iptables -I INPUT 1 -p tcp --dport 3377 -j ACCEPT
iptables -I INPUT 1 -p udp --dport 3377 -j ACCEPT
iptables -A FORWARD -i tun1 -s 10.0.1.0/24 -d 172.24.1.0/24 -j ACCEPT
iptables -A FORWARD -i tun1 -s 172.24.8.0/24 -d 172.24.1.0/24 -j ACCEPT
iptables -I INPUT -i tun1 -s 172.24.8.0/24 -j ACCEPT
iptables -A FORWARD -o tun1 -s 172.24.1.0/24 -j ACCEPT&lt;/pre&gt;

&lt;p&gt;2.Openvpn客户端（内部局域网段172.24.8.0/24）：&lt;br /&gt;
首先/etc/config/network配置加一个interface：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;config interface &apos;vpn1&apos;
    option proto &apos;none&apos;
    option ifname &apos;tun1&apos;&lt;/pre&gt;

&lt;p&gt;/etc/config/openvpn文件增加内容：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;
config openvpn &apos;vpn_client&apos;
        option client &apos;1&apos;
        option dev &apos;tun1&apos;
        option proto &apos;tcp&apos;
        list remote &apos;远端地址 3377&apos;
        option remote_cert_tls &apos;server&apos;
        option remote_random &apos;1&apos;
        option resolv_retry &apos;infinite&apos;
        option persist_key &apos;1&apos;
        option persist_tun &apos;1&apos;
        option ca &apos;/etc/openvpn/ca.crt&apos;
        option cert &apos;/etc/openvpn/tbjj.crt&apos;
        option key &apos;/etc/openvpn/tbjj.key&apos;
        option compress &apos;lzo&apos;
        option verb &apos;3&apos;
        option enabled &apos;1&apos;
        option nobind &apos;1&apos;
        option auth_nocache &apos;1&apos;

        &lt;/pre&gt;

&lt;p&gt;然后防火墙自定义规则添加：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;iptables -I INPUT 1 -p tcp --dport 1195 -j ACCEPT
iptables -I INPUT 1 -p udp --dport 1195 -j ACCEPT
iptables -A FORWARD -i tun1 -s 172.24.1.0/24 -d 172.24.8.0/24 -j ACCEPT
iptables -I INPUT -i tun1 -s 172.24.1.0/24 -j ACCEPT
iptables -A FORWARD -i tun1 -s 10.0.1.0/24 -d 172.24.8.0/24 -j ACCEPT
iptables -A FORWARD -o tun1 -s 172.24.8.0/24 -j ACCEPT
 &lt;/pre&gt;

&lt;p&gt;3.最后重启两个路由，2个局域网就可以互相访问了。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;br /&gt;
1.http://blog.ltns.info/linux/connect_two_home_networks_using_openvpn_and_openwrt/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用uClibc Toolchain编译LEDE系统，适配迅雷xware远程下载</title>
   <link href="https://jibenfa.github.io/openwrt/2017/02/18/e4bdbfe794a8uclibc-toolchaine7bc96e8af91ledee7b3bbe7bb9fefbc8ce98082e9858de8bf85e99bb7xwaree8bf9ce7a88be4b88be8bdbd/"/>
   <updated>2017-02-18T21:44:38+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2017/02/18/e4bdbfe794a8uclibc-toolchaine7bc96e8af91ledee7b3bbe7bb9fefbc8ce98082e9858de8bf85e99bb7xwaree8bf9ce7a88be4b88be8bdbd</id>
   <content type="html">&lt;p&gt;最近买了MT7621路由，还带sata口，就想适配一个系统，由于：&lt;br /&gt;
1.Openwrt官方trunk里面kmod-mt76驱动居然还停留在2016年6月，实测2.4G比较弱，所以不予考虑了，再看LEDE的snapshot，更新到2017年2月了，当然要选择LEDE了。&lt;br /&gt;
2.LEDE目前全面切换到了MUSL库，导致迅雷xware mipsel的32位uclibc版本直接不能用了，为了适配，所以必须编译一个基于uClibc库的系统，但是LEDE/OPENWRT的toolchain默认菜单里面都只有musl和glibc了，uclibc被标记为了broken。。。。所以必须自行研究。&lt;/p&gt;

&lt;p&gt;折腾了大约1周，终于搞定了，步骤如下：&lt;br /&gt;
&lt;strong&gt;1.下载LEDE源码，这个很简单：&lt;/strong&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;git clone https://git.lede-project.org/source.git
cd source
./scripts/feeds update -a
./scripts/feeds install -a&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.修改Toolchain，以便使用uClibc：&lt;/strong&gt;&lt;br /&gt;
(1).修改/toolchain/Config.in&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;--- a/toolchain/Config.in
+++ b/toolchain/Config.in
 
 	config LIBC_USE_UCLIBC
 		select USE_UCLIBC
-		bool &quot;Use uClibc&quot;
+		bool &quot;Use uClibc-ng&quot;
 		depends on !(aarch64 || aarch64_be)
-		depends on BROKEN || !(arm || armeb || i386 || x86_64 || mips || mipsel || mips64 || mips64el || powerpc)&lt;/pre&gt;

&lt;p&gt;(2).修改/toolchain/uClibc/Makefile&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;--- a/toolchain/uClibc/Makefile
+++ b/toolchain/uClibc/Makefile

 define Host/SetToolchainInfo
 	$(SED) &apos;s,^\(LIBC_TYPE\)=.*,\1=$(PKG_NAME),&apos; $(TOOLCHAIN_DIR)/info.mk
-	$(SED) &apos;s,^\(LIBC_URL\)=.*,\1=http://www.uclibc.org/,&apos; $(TOOLCHAIN_DIR)/info.mk
+	$(SED) &apos;s,^\(LIBC_URL\)=.*,\1=http://www.uclibc-ng.org/,&apos; $(TOOLCHAIN_DIR)/info.mk
 	$(SED) &apos;s,^\(LIBC_VERSION\)=.*,\1=$(PKG_VERSION),&apos; $(TOOLCHAIN_DIR)/info.mk
 	$(SED) &apos;s,^\(LIBC_SO_VERSION\)=.*,\1=$(LIBC_SO_VERSION),&apos; $(TOOLCHAIN_DIR)/info.mk
 endef&lt;/pre&gt;

&lt;p&gt;(3).修改toolchain/uClibc/headers/Makefile&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;--- a/toolchain/uClibc/headers/Makefile
+++ b/toolchain/uClibc/headers/Makefile
 
 		CC=&quot;$(TARGET_CC)&quot; \
 		CPU_CFLAGS=&quot;$(TARGET_CFLAGS)&quot; \
 		ARCH=&quot;$(CONFIG_ARCH)&quot; \
-		pregen \
 		install_headers
 endef&lt;/pre&gt;

&lt;p&gt;(4).如果要修改使用的uclibc-ng版本，需要修改toolchain/uClibc/common.mk里面的版本号和对应sha值，默认1.0.22不用修改了。&lt;/p&gt;

&lt;p&gt;上述修改完成后，后续make menuconfig里面就可以选择到uclibc-ng了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.编译系统&lt;/strong&gt;&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;make menuconfig&lt;/pre&gt;

&lt;p&gt;通过advanced configuration options (for developers) &amp;gt; Toolchain Options &amp;gt; c library &amp;gt; uclibc-ng&lt;br /&gt;
其他自己选择。保存.config后，输入：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;nohup ./autocompile.sh &amp;amp;&lt;/pre&gt;

&lt;p&gt;自动编译脚本autocompile.sh 内容为：&lt;/p&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;if [ &quot;$1&quot; != &quot;-f&quot; ] ; then
        IGNORE_ERRORS=1 make 2&amp;gt;&amp;amp;1| tee errors.txt

        rm build_*.txt
fi

for i in $(grep &quot;failed to build&quot; errors.txt | sed &apos;s/^.*ERROR:[[:space:]]*\([^[:space:]].*\) failed to build.*$/\1/&apos; ) ; do
        if [ &quot;$i&quot; != &quot;&quot; ] ; then
                echo Compiling: ${i}
                make ${i}-compile V=99 &amp;gt; build_${i##*/}.txt 2&amp;gt;&amp;amp;1 || echo ${i} : Build failed, see build_${i##*/}.txt
        fi
done
&lt;/pre&gt;

&lt;p&gt;等几个小时以后就可以在source/bin目录下找到编译完成的系统了，编译过程中另外一个ssh登录，通过errors.txt和nohup.out查看编译进度，原ssh窗口可以关闭。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.安装系统，配置调试迅雷&lt;/strong&gt;&lt;br /&gt;
可以通过命令行sysupgrade -v xxxx.bin或者通过luci网页升级系统。&lt;br /&gt;
升级完成后，由于uclibc-ng 1.0.18及之后版本将libpthread, libcrypt, libdl, libm, libutil等库合并到了libuClibc中，需要link一些libuClibc，以便迅雷xware可以使用：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;cd /lib
ln -s libuClibc-1.0.22.so libdl.so.0
ln -s libuClibc-1.0.22.so  libpthread.so.0 &lt;/pre&gt;

&lt;p&gt;然后将Xware1.0.31_mipsel_32_uclibc上传路由，运行:&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;root@LEDE:~/xunlei# ./portal
initing...
try stopping xunlei service first...
killall: ETMDaemon: no process killed
killall: EmbedThunderManager: no process killed
killall: vod_httpserver: no process killed
setting xunlei runtime env...
port: 9000 is usable.

YOUR CONTROL PORT IS: 9000

starting xunlei service...
etm path: /root/xunlei
execv: /root/xunlei/lib/ETMDaemon.

getting xunlei service info...
Connecting to 127.0.0.1:9000 (127.0.0.1:9000)

THE ACTIVE CODE IS: &lt;/pre&gt;

&lt;p&gt;常用软件例如chinadns可使用imagebuilder编译。&lt;br /&gt;
**&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;p&gt;参考文档：&lt;br /&gt;
1.http://lists.infradead.org/pipermail/lede-dev/2016-June/001145.html&lt;br /&gt;
2.https://lists.openwrt.org/pipermail/openwrt-devel/2009-June/004411.html&lt;br /&gt;
3.https://www.mail-archive.com/lede-dev@lists.infradead.org/msg05838.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Openwrt的密码api变化带来的影响</title>
   <link href="https://jibenfa.github.io/openwrt/2017/02/13/openwrte79a84e5af86e7a081apie58f98e58c96e5b8a6e69da5e79a84e5bdb1e5938d/"/>
   <updated>2017-02-13T20:54:41+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2017/02/13/openwrte79a84e5af86e7a081apie58f98e58c96e5b8a6e69da5e79a84e5bdb1e5938d</id>
   <content type="html">&lt;p&gt;从openwrt &lt;a href=&quot;https://dev.openwrt.org/changeset/46483&quot;&gt;r46483&lt;/a&gt; &lt;a href=&quot;https://dev.openwrt.org/browser/trunk/package/kernel/linux/modules/crypto.mk?rev=46820&quot;&gt;r46820&lt;/a&gt;版本开始，kmod-crypto-aes,kmod-crypto-arc4,kmod-crypto-core不再作为单独的软件包提供，而是在kernel中提供，目前测试下来，在mt7621的dd trunk版本中，wifi的wpa2的aes加密未受到影响，但是shadowsocks受到了影响，aes和rc4-md5相关算法均会报cipher not found 的错误导致不能使用。只能使用chacha20或者salsa20的算法，后者是基于libsodium包的，实测未受到影响。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MT7621路由性能评测</title>
   <link href="https://jibenfa.github.io/openwrt/2017/02/11/mt7621e8b7afe794b1e680a7e883bde8af84e6b58b/"/>
   <updated>2017-02-11T17:10:56+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2017/02/11/mt7621e8b7afe794b1e680a7e883bde8af84e6b58b</id>
   <content type="html">&lt;p&gt;最近在网上逛的时候发现一款MT7621的路由，由于OPENWRT的TRUNK版官方支持该路由，所以就买了一个回来，型号是ZBT-WG3526,16MB ROM，512MB RAM，MT7603EN的2.4GHz芯片，据说此芯片驱动有不少问题，目前还在解决中，MT7612EN的5GHz芯片，驱动据说非常稳定，支持ac，另外还有一个sata口和mini pcie，可以接一个笔记本硬盘，测试了一下，可以塞进去，不过要想办法固定。&lt;br /&gt;
出厂系统直接不能用，而且只能识别128MB内存，简直坑爹。。。所以到手就用sysupgrade刷了trunk版本的OP官方系统。。。由于trunk版本是musl的c库，很多软件需要重新编译才能使用，例如chinadns，迅雷xware直接不能用。。。等15.05.2出个glibc的版本才可以。。。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;https://jibenfa.github.io/uploads/2017/02/QQ20170211165927.png&quot; width=&quot;1000&quot; height=&quot;618&quot; alt=&quot;AltText&quot; /&gt;
 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;下面是几个路由性能对比，这个cpu单核性能约是MT7620的2倍，双核性能约是MT7620的4倍，但是还是不如linksys wrt1900ac，MT7621 880Mhz双核性能都只有Marvell MV78230-B0 1.2GHZ的一半左右，价格嘛，mt7620基本是100块，mt7621路由320块,1900ac要999块&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;https://jibenfa.github.io/uploads/2017/02/QQ20170211171416.png&quot; width=&quot;1000&quot; height=&quot;618&quot; alt=&quot;AltText&quot; /&gt;
 &lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Openwrt 利用squid进行上网行为控制，过滤在线视频和视频下载</title>
   <link href="https://jibenfa.github.io/openwrt/2016/08/11/openwrt-e588a9e794a8squide8bf9be8a18ce4b88ae7bd91e8a18ce4b8bae68ea7e588b6efbc8ce8bf87e6bba4e59ca8e7babfe8a786e9a291e5928ce8a786e9a291/"/>
   <updated>2016-08-11T08:30:42+00:00</updated>
   <id>https://jibenfa.github.io/openwrt/2016/08/11/openwrt-e588a9e794a8squide8bf9be8a18ce4b88ae7bd91e8a18ce4b8bae68ea7e588b6efbc8ce8bf87e6bba4e59ca8e7babfe8a786e9a291e5928ce8a786e9a291</id>
   <content type="html">&lt;p&gt;某些情况下，需要过滤在线视频和视频下载，按照IP或者网址过滤当然是可以的，不过要找到那么多视频网址很麻烦，现在大多数视频网站都开启了CDN，即便拿到ip池也是不全的。找了半天，终于看到了一个办法。&lt;br /&gt;
首先当然是安装squid了：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;opkg update
opkg install squid
vi /etc/squid/squid.conf&lt;/pre&gt;

&lt;p&gt;内容为：&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre class=&quot;lang:vim decode:true &quot;&gt;######General Settings##############

http_port 3128 transparent

######Block Video Streaming##############

acl media rep_mime_type video/flv video/x-flv
acl media rep_mime_type -i ^video/
acl media rep_mime_type -i ^video\/
#acl media rep_mime_type ^application/x-shockwave-flash
acl media rep_mime_type ^application/vnd.ms.wms-hdr.asfv1
acl media rep_mime_type ^application/x-fcs
acl media rep_mime_type ^application/x-mms-framed
acl media rep_mime_type ^video/x-ms-asf
acl media rep_mime_type ^audio/mpeg
acl media rep_mime_type ^audio/x-scpls
acl media rep_mime_type ^video/x-flv
acl media rep_mime_type ^video/mpeg4
acl media rep_mime_type ms-hdr
acl media rep_mime_type x-fcs
acl mediapr urlpath_regex \.flv(\?.*)?$
acl mediapr urlpath_regex -i \.(avi|mp4|mov|m4v|mkv|flv)(\?.*)?$
acl mediapr urlpath_regex -i \.(mpg|mpeg|avi|mov|flv|wmv|mkv|rmvb)(\?.*)?$


acl localnet src 172.16.0.0/12
acl localnet src 192.168.0.0/16
acl localnet src fc00::/7
acl localnet src fe80::/10

acl ssl_ports port 443

acl safe_ports port 80
acl safe_ports port 21
acl safe_ports port 443
acl safe_ports port 70
acl safe_ports port 210
acl safe_ports port 1025-65535
acl safe_ports port 280
acl safe_ports port 488
acl safe_ports port 591
acl safe_ports port 777
acl connect method connect


http_access deny mediapr
http_reply_access deny media

http_access deny !safe_ports
http_access deny connect !ssl_ports

http_access allow localhost manager
http_access deny manager

http_access deny to_localhost

http_access allow localnet
http_access allow localhost

http_access deny all

refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320

access_log none
cache_mem 16 MB
cache_log /dev/null
cache_store_log /dev/null
logfile_rotate 0

logfile_daemon /dev/null&lt;/pre&gt;

&lt;p&gt;然后在防火墙打开重定向：&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;iptables -t nat -A PREROUTING -p tcp -s 192.168.1.0/24 --dport 80 -j REDIRECT --to-ports 3128
#iptables -t nat -A PREROUTING -p tcp -s 192.168.1.0/24 --dport 443 -j REDIRECT --to-ports 3128
iptables -t nat -A PREROUTING -p tcp -s 192.168.1.0/24 --dport 1024:65535 -j REDIRECT --to-ports 3128
&lt;/pre&gt;

&lt;p&gt;注意443端口重定向可能会造成网页无法访问。&lt;/p&gt;

&lt;p&gt;最后启动squid:&lt;/p&gt;

&lt;pre class=&quot;lang:sh decode:true &quot;&gt;/etc/init.d/squid start&lt;/pre&gt;

&lt;p&gt;参考：&lt;br /&gt;
1.https://rbgeek.wordpress.com/2012/09/12/how-to-block-video-streaming-with-squid/&lt;/p&gt;
</content>
 </entry>
 

</feed>
